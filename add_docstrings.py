from pathlib import Path
from typing import List, Tuple, Dict
import os

import ast

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è docstrings –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º"""

class DocstringAdder(ast.NodeVisitor):"""–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è docstrings"""
"""–ö–ª–∞—Å—Å DocstringAdder."""

    def __init__(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç."""
    self.functions_without_docs = []
    self.classes_without_docs = []

    def visit_FunctionDef(self, node):"""–ü–æ—Å–µ—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç visit FunctionDef."""
        if not self._has_docstring(node):
        self.functions_without_docs.append({
            'name': node.name,'lineno': node.lineno,
                    'args': [arg.arg for arg in node.args.args],'returns': self._get_return_annotation(node)
        })
    self.generic_visit(node)

    def visit_AsyncFunctionDef(self, node):
    """–ü–æ—Å–µ—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if not self._has_docstring(node):
        self.functions_without_docs.append({
            'name': node.name,'lineno': node.lineno,
                    'args': [arg.arg for arg in node.args.args],
                    'returns': self._get_return_annotation(node),'async': True
        })
    self.generic_visit(node)

    def visit_ClassDef(self, node):
    """–ü–æ—Å–µ—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤"""
        if not self._has_docstring(node):
        self.classes_without_docs.append({
            'name': node.name,'lineno': node.lineno,
                    'bases': [base.id if hasattr(base, 'id') else str(base) for base in node.bases]
        })
    self.generic_visit(node)

    def _has_docstring(self, node):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ docstring"""
        return (node.body and
            isinstance(node.body[0], ast.Expr) and
            isinstance(node.body[0].value, ast.Constant) and
            isinstance(node.body[0].value.value, str))

    def _get_return_annotation(self, node):"""–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  get return annotation."""
        if hasattr(node, 'returns') and node.returns:if hasattr(node.returns, 'id'):
                return node.returns.id
        else:
                return str(node.returns)
        return None

def generate_function_docstring(func_info: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç docstring –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    name = func_info['name']args = func_info.get('args',
        [])returns = func_info.get('returns')is_async = func_info.get('async', False)

    # –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µif name.startswith('_'):
    desc = f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è {name[1:].replace('_', ' ')}"
    elif name.startswith('test_'):
    desc = f"–¢–µ—Å—Ç –¥–ª—è {name[5:].replace('_', ' ')}"
    elif name == '__init__':
    desc = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç"
    else:desc = f"{'–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ ' if is_async else ''}–≤—ã–ø–æ–ª–Ω—è–µ—Ç {name.replace('_', ' ')}"

    docstring = f'    """{desc}.'

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ãif args and args != ['self', 'cls']:docstring += '\n    \n    Args:'
        for arg in args:if arg not in ['self',
        'cls']:docstring += f'\n        {arg}: –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è {arg.replace("_", " ")}'

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if returns:docstring += f'\n    \n    Returns:\n        {returns}: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏'
    docstring += '\n    """'
    return docstring

def generate_class_docstring(class_info: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç docstring –¥–ª—è –∫–ª–∞—Å—Å–∞"""
    name = class_info['name']bases = class_info.get('bases', [])
    if name.startswith('Test'):
    desc = f"–¢–µ—Å—Ç—ã –¥–ª—è {name[4:].replace('_', ' ')}"
    elif bases:desc = f"–ö–ª–∞—Å—Å {name} –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π –æ—Ç {', '.join(bases)}"
    else:desc = f"–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å {name.lower().replace('_', ' ')}"

    return f'    """{desc}."""'

def add_docstrings_to_file(file_path: Path) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç docstrings –≤ —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    tree = ast.parse(content)
    visitor = DocstringAdder()
    visitor.visit(tree)

        if not visitor.functions_without_docs and not visitor.classes_without_docs:
            return 0
    lines = content.split('\n')
    modifications = 0

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
    all_missing = []

        for func in visitor.functions_without_docs:all_missing.append(('function', func))

        for cls in visitor.classes_without_docs:all_missing.append(('class', cls))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µall_missing.sort(key=lambda x: x[1]['lineno'], reverse=True)

        for item_type, item_info in all_missing:lineno = item_info['lineno']
            if item_type == 'function':
            docstring = generate_function_docstring(item_info)
        else:
            docstring = generate_class_docstring(item_info)

        # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        def_line_idx = lineno - 1

        # –ù–∞–π–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º (–ø—Ä–æ–ø—É—Å—Ç–∏–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
            insert_idx = def_line_idx + 1while insert_idx < len(lines) and lines[insert_idx].strip() == '':
            insert_idx += 1

        # –í—Å—Ç–∞–≤–ª—è–µ–º docstring
        lines.insert(insert_idx, docstring)
        modifications += 1

        if modifications > 0:with open(file_path,'w', encoding='utf-8') as f:f.write('\n'.join(lines))

        return modifications

    except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return 0

def main():"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""project_root = Path("/Users/alexandr/Desktop/Projects/Scripts/Mailing")
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç main."""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    important_dirs = ["mailing","templating","persistence","resend","validation",
    "data_loader","stats", "gui"
    ]

    total_modifications = 0
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ docstrings –∫ –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º...")
    print()

    for dir_name in important_dirs:
    dir_path = project_root / dir_name
        if not dir_path.exists():
        continue
        python_files = list(dir_path.rglob("*.py"))

        for file_path in python_files:
            if '__pycache__' in str(file_path):
            continue

        modifications = add_docstrings_to_file(file_path)
        total_modifications += modifications

            if modifications > 0:
            print(f"‚úÖ {file_path.relative_to(project_root)}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {modifications} docstrings")

    print()print(f"üéâ –î–û–ë–ê–í–õ–ï–ù–ò–ï DOCSTRINGS –ó–ê–í–ï–†–®–ï–ù–û:")print(f"   üìö –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_modifications} docstrings")print(f"   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π —É–ª—É—á—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
