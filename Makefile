# Email Marketing Tool - Enhanced Makefile
PYTHON := .venv/bin/python
PIP := .venv/bin/pip

.PHONY: help install test test-cov lint format security audit clean dev build docs deploy
.PHONY: enhanced-install enhanced-dev enhanced-prod ssl-certs backup-create metrics-check
.PHONY: auth-setup cache-clear test-e2e

help:
	@echo "ÔøΩ Professional Email Marketing Tool - Enhanced"
	@echo "Available commands:"
	@echo "  install     - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  test        - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  test-cov    - –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
	@echo "  test-e2e    - End-to-end —Ç–µ—Å—Ç—ã"
	@echo "  lint        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
	@echo "  format      - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "  security    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
	@echo "  audit       - –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "  clean       - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo ""
	@echo "üöÄ Enhanced Features:"
	@echo "  enhanced-install - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
	@echo "  enhanced-dev     - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"
	@echo "  enhanced-prod    - Production –∑–∞–ø—É—Å–∫ —Å HTTPS"
	@echo "  ssl-certs        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
	@echo "  backup-create    - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
	@echo "  metrics-check    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫"
	@echo "  auth-setup       - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
	@echo "  cache-clear      - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
	@echo ""

# Enhanced installation with new dependencies
enhanced-install: install
	@echo "üîß Installing enhanced dependencies..."
	$(PIP) install passlib[bcrypt] python-jose[cryptography] PyJWT redis aiofiles
	$(PIP) install prometheus-client psutil bleach pytest-httpx
	@echo "‚úÖ Enhanced dependencies installed"

# SSL certificates generation
ssl-certs:
	@echo "üîí Generating SSL certificates..."
	./scripts/generate_ssl_certs.sh localhost 365
	@echo "‚úÖ SSL certificates generated"

# Enhanced development mode
enhanced-dev: enhanced-install ssl-certs
	@echo "üöÄ Starting enhanced development server..."
	export ENVIRONMENT=development && \
	export TEMPLATE_CACHE_ENABLED=true && \
	export METRICS_ENABLED=true && \
	export BACKUP_ENABLED=true && \
	export HTTPS_ENABLED=false && \
	$(PYTHON) src/enhanced_app.py

# Enhanced production mode with HTTPS
enhanced-prod: enhanced-install ssl-certs production
	@echo "üîí Starting enhanced production server with HTTPS..."
	export ENVIRONMENT=production && \
	export HTTPS_ENABLED=true && \
	export FORCE_HTTPS=true && \
	export TEMPLATE_CACHE_ENABLED=true && \
	export METRICS_ENABLED=true && \
	export BACKUP_ENABLED=true && \
	$(PYTHON) src/enhanced_app.py

# Authentication setup
auth-setup:
	@echo "üîë Setting up authentication..."
	@echo "Generating secure secret key..."
	@$(PYTHON) -c "import secrets; print('AUTH_SECRET_KEY=' + secrets.token_urlsafe(32))" > .env.auth
	@echo "‚úÖ Authentication configured. Add .env.auth to your environment."

# Create backup
backup-create:
	@echo "üíæ Creating database backup..."
	@$(PYTHON) -c "import asyncio; from src.persistence.backup import get_backup_manager; asyncio.run(get_backup_manager().create_backup('manual'))"
	@echo "‚úÖ Backup created"

# Check metrics
metrics-check:
	@echo "üìä Checking metrics endpoint..."
	@curl -s http://localhost:8080/metrics | head -20 || echo "Metrics server not running"

# Clear cache
cache-clear:
	@echo "üßπ Clearing template cache..."
	@$(PYTHON) -c "import asyncio; from src.templating.cached_engine import get_template_engine; asyncio.run(get_template_engine().clear_cache())"
	@echo "‚úÖ Cache cleared"

# End-to-end tests
test-e2e: enhanced-install
	@echo "üß™ Running E2E tests..."
	$(PYTHON) -m pytest tests/test_e2e_comprehensive.py -v --tb=short
	@echo "‚úÖ E2E tests completed"

# Enhanced security check
security-enhanced: security
	@echo "üîí Running enhanced security checks..."
	@echo "Checking for hardcoded secrets..."
	@grep -r "api_key\|password\|secret" src/ --include="*.py" | grep -v "getenv\|config" || echo "No hardcoded secrets found"
	@echo "Checking SSL configuration..."
	@$(PYTHON) -c "from src.security.https_config import load_https_config; print('HTTPS config:', load_https_config())"
	@echo "‚úÖ Enhanced security check completed"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install:
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	python3 -m venv .venv
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	$(PIP) install pytest pytest-cov pytest-asyncio black isort flake8 mypy bandit safety
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test:
	@echo "üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤..."
	$(PYTEST) tests/ -v --tb=short
	@echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"

# –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
test-fast:
	@echo "‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	$(PYTEST) tests/ -v --tb=short -m "not slow" --maxfail=5
	@echo "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"

# –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
test-cov:
	@echo "üìä –¢–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è..."
	$(PYTEST) tests/ --cov=src --cov-report=html:reports/htmlcov --cov-report=term-missing
	@echo "‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ reports/htmlcov/"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
lint:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
	@echo "–ó–∞–ø—É—Å–∫ flake8..."
	-$(PYTHON) -m flake8 $(PROJECT_NAME)/ --count --select=E9,F63,F7,F82 --show-source --statistics
	@echo "–ó–∞–ø—É—Å–∫ mypy..."
	-$(PYTHON) -m mypy $(PROJECT_NAME)/ --ignore-missing-imports
	@echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format:
	@echo "üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	@echo "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤..."
	$(PYTHON) -m isort $(PROJECT_NAME)/ tests/
	@echo "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å black..."
	$(PYTHON) -m black $(PROJECT_NAME)/ tests/ --line-length=100
	@echo "‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security:
	@echo "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
	-$(PYTHON) -m safety check
	@echo "–ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ..."
	-$(PYTHON) -m bandit -r $(PROJECT_NAME)/ -ll
	@echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞
audit:
	@echo "üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
	$(PYTHON) comprehensive_audit.py
	$(PYTHON) deep_analysis.py
	@echo "‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type f -name "*.pyo" -delete 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf .pytest_cache/
	rm -rf reports/htmlcov/
	rm -rf .coverage
	rm -rf .mypy_cache/
	rm -rf build/
	rm -rf dist/
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@echo "GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
	$(PYTHON) run_gui.py &
	@echo "Webhook —Å–µ—Ä–≤–µ—Ä:"
	$(PYTHON) -m mailing.webhook_server &
	@echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ"

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build: clean format lint test
	@echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
	$(PYTHON) setup.py sdist bdist_wheel
	@echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
docs:
	@echo "üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	@echo "–°–æ–∑–¥–∞–Ω–∏–µ README –¥–ª—è –º–æ–¥—É–ª–µ–π..."
	find $(PROJECT_NAME)/ -name "*.py" -exec $(PYTHON) -c "import ast, sys; help(ast.parse(open(sys.argv[1]).read()).body[0])" {} \;
	@echo "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
deploy: build security
	@echo "üö¢ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	$(PYTHON) -c "import os; assert os.getenv('RESEND_API_KEY'), 'RESEND_API_KEY not set'"
	$(PYTHON) -c "import os; assert os.getenv('RESEND_FROM_EMAIL'), 'RESEND_FROM_EMAIL not set'"
	@echo "–ó–∞–ø—É—Å–∫ preflight –ø—Ä–æ–≤–µ—Ä–æ–∫..."
	$(PYTHON) -c "from mailing.preflight import validate_env; validate_env()"
	@echo "‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
pre-commit: format lint test-fast
	@echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É"

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
quality: format lint security test-cov
	@echo "‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
setup-dev: install
	@echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@echo "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)..."
	@if [ ! -f .env ]; then \
		echo "# Environment variables for development" > .env; \
		echo "RESEND_API_KEY=your_api_key_here" >> .env; \
		echo "RESEND_FROM_EMAIL=noreply@yourdomain.com" >> .env; \
		echo "RESEND_FROM_NAME=Your App" >> .env; \
		echo "# Database" >> .env; \
		echo "SQLITE_DB_PATH=mailing.sqlite3" >> .env; \
		echo ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."; \
	fi
	@echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update-deps:
	@echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	$(PIP) list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 $(PIP) install -U
	$(PIP) freeze > requirements.txt
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check-system:
	@echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
	@echo "Python –≤–µ—Ä—Å–∏—è:"
	$(PYTHON) --version
	@echo "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:"
	$(PIP) list
	@echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest:"
	$(PYTEST) --version
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤:"
	$(PYTHON) -c "import mailing, templating, persistence, resend; print('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è')"
	@echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
profile:
	@echo "‚ö° –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
	$(PYTHON) -c "import cProfile; cProfile.run('from mailing.sender import run_campaign; print(\"Profile completed\")')"
	@echo "‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
test-file:
	@echo "üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–æ–≤..."
	@echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make test-file FILE=tests/test_core.py"
	@if [ -z "$(FILE)" ]; then echo "‚ùå –£–∫–∞–∂–∏—Ç–µ FILE=path/to/test.py"; exit 1; fi
	$(PYTEST) $(FILE) -v

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
watch-tests:
	@echo "üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ watchdog)..."
	@echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install watchdog"
	@echo "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/watch_tests.py"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–º–º–∏—Ç–æ–≤
check-commits:
	@echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–º–º–∏—Ç–æ–≤..."
	git log --oneline -10
	@echo "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã"