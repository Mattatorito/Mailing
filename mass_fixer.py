#!/usr/bin/env python3
"""
–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ Python —Ñ–∞–π–ª–∞—Ö.
"""

import os
import re
from pathlib import Path

def fix_file_completely(file_path: str) -> bool:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª Python –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫."""

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
    content = f.read()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    lines = content.split('\n')
    fixed_lines = []

        for i, line in enumerate(lines):
        original_line = line

        # 1. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫)
            if i < 20 and line.startswith('    ') and not any(x in line for x in ['def ', 'class ', 'if ', 'for ', 'while ', 'try:', 'except', 'with ', 'return', 'yield']):
            line = line[4:]

        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
            if line.startswith('        ') and not any(x in line for x in ['def ', 'class ', 'if ', 'for ', 'while ', 'try:', 'except', 'with ', 'return', 'yield']):
            line = line[4:]

        # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        line = re.sub(r'import\s+(\w+)import\s+(\w+)', r'import \1\nimport \2', line)
        line = re.sub(r'from\s+([^\s]+)\s+import\s+([^\s]+)from\s+([^\s]+)\s+import\s+([^\s]+)', 
                     r'from \1 import \2\n
from \3 import \4', line)

        # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å docstring
            if '"""' in line:
            line = line.replace('"""', '"""')

        # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å docstring –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if 'def ' in line and ':
    """' in line and '."""' in line:
            parts = line.split(':"""')
                if len(parts) == 2:
                    func_def = parts[0] + ':'
                docstring_part = parts[1]
                    if '."""' in docstring_part:
                    docstring = '"""' + docstring_part.replace('."""', '."""')
                        line = func_def + '\n    ' + docstring

            # 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ docstring –∏–¥–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ def –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞
            if line.strip().startswith('"""') and i > 0 and 'def ' in lines[i-1]:
            line = '    ' + line.strip()

        # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –±–µ–∑ body
            if line.strip().startswith('class ') and line.strip().endswith(':'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                if i + 1 < len(lines):
                next_line = lines[i + 1].strip()
                    if next_line.startswith('"""') and not next_line.startswith('    '):
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∫ docstring
                    pass  # –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

            # 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º async def –ø—Ä–æ–±–ª–µ–º—ã
            if 'async def' in line and line.count(':
    ') > 1:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –∏ —á—Ç–æ-—Ç–æ –µ—â–µ
            parts = line.split(':', 2)
                if len(parts) >= 2:
                line = parts[0] + ':'
                    if len(parts) > 2:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—Å—Ç—É–ø–æ–º
                    fixed_lines.append(line)
                    line = '    ' + ':'.join(parts[1:])

        fixed_lines.append(line)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    final_lines = []
    prev_was_empty = False

        for line in fixed_lines:
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if line.strip() == '':
                if not prev_was_empty:
                final_lines.append('')
            prev_was_empty = True
        else:
            final_lines.append(line)
            prev_was_empty = False

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(final_lines))

    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
        return True

    except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False

def main():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ."""

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    all_py_files = []

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for root, dirs, files in os.walk('.'):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .venv, __pycache__ –∏ .git
        dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']

        for file in files:
            if file.endswith('.py') and not file.startswith('.'):
            full_path = os.path.join(root, file)
            all_py_files.append(full_path)

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_py_files)} Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")

    fixed_count = 0

    for file_path in all_py_files:
        if fix_file_completely(file_path):
        fixed_count += 1

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∏–∑ {len(all_py_files)} —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()