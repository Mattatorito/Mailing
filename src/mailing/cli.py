#!/usr/bin/env python3

from __future__ import annotations
import asyncio
import sys
from pathlib import Path
from typing import List
from rich.console import Console
from src.mailing.config import settings
from src.mailing.models import Recipient
from src.mailing.sender import run_campaign, CampaignController
from src.data_loader.csv_loader import CSVLoader
from src.data_loader.excel_loader import ExcelLoader
import json

console = Console()


def load_recipients(data_file: str) -> List[Recipient]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö."""
    data_path = Path(data_file)
    
    if not data_path.exists():
        console.print(f"[red]–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}[/red]")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}")
    
    ext = data_path.suffix.lower()
    
    if ext == '.csv':
        loader = CSVLoader()
        return loader.load(str(data_path))
    elif ext in ['.xlsx', '.xls']:
        loader = ExcelLoader()
        return loader.load(str(data_path))
    elif ext == '.json':
        return load_json_recipients(str(data_path))
    else:
        console.print(f"[red]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}[/red]")
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}")


def load_json_recipients(json_file: str) -> List[Recipient]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    from email_validator import validate_email, EmailNotValidError
    
    with open(json_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    recipients = []
    for item in data:
        if isinstance(item, dict) and 'email' in item:
            email = item['email']
            
            # Validate email format
            try:
                validate_email(email)
            except EmailNotValidError:
                console.print(f"[yellow]–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ email: {email}[/yellow]")
                continue
            name = item.get('name', '')
            variables = {k: v for k, v in item.items() if k not in ['email', 'name']}
            
            recipient = Recipient(
                email=email,
                name=name,
                variables=variables
            )
            recipients.append(recipient)
    
    return recipients


async def send_all(
    recipients_file: str,
    template_name: str,
    subject: str,
    dry_run: bool = False,
    concurrency: int = 5
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º."""
    console.print(f"–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏: {subject}")
    console.print(f"üìß –®–∞–±–ª–æ–Ω: {template_name}")
    console.print(f"üìÅ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {recipients_file}")
    console.print(f"üîß –†–µ–∂–∏–º: {'–¢–µ—Å—Ç–æ–≤—ã–π (dry-run)' if dry_run else '–†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞'}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    try:
        recipients = load_recipients(recipients_file)
        console.print(f"ÔøΩÔøΩ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}[/red]")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–º–ø–∞–Ω–∏–∏
    controller = CampaignController()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    campaign_success = True
    try:
        async for event in run_campaign(
            recipients=recipients,
            template_name=template_name,
            subject=subject,
            dry_run=dry_run,
            concurrency=concurrency,
            controller=controller
        ):
            if event['type'] == 'progress':
                console.print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {event['sent']}/{event['total']}")
            elif event['type'] == 'error':
                console.print(f"[red]–û—à–∏–±–∫–∞: {event['message']}[/red]")
                campaign_success = False
            elif event['type'] == 'finished':
                stats = event['stats']
                console.print(f"–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                console.print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}")
                console.print(f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['delivered']}")
                console.print(f"–û—à–∏–±–æ–∫: {stats['failed']}")
                if stats.get('failed', 0) > 0:
                    campaign_success = False
        
        return campaign_success
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {e}[/red]")
        return False


def main():
    """Main CLI entry point."""
    if len(sys.argv) < 4:
        console.print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python -m mailing.cli <recipients_file> <template> <subject> [--dry-run]")
        sys.exit(1)
    
    recipients_file = sys.argv[1]
    template_name = sys.argv[2]
    subject = sys.argv[3]
    dry_run = '--dry-run' in sys.argv
    
    # Use return value for proper exit codes
    success = asyncio.run(send_all(recipients_file, template_name, subject, dry_run))
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
