#!/usr/bin/env python3
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ.
"""

import os
import asyncio
import logging
from contextlib import asynccontextmanager
from typing import Optional

from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import PlainTextResponse, RedirectResponse
from fastapi.security import HTTPBearer

# –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from src.security.auth import get_auth_manager, get_current_user, require_https
from src.security.https_config import load_https_config, get_uvicorn_ssl_config
from src.monitoring.metrics import get_metrics, start_metrics_collection, stop_metrics_collection
from src.persistence.backup import initialize_backup_system, start_backup_scheduler, stop_backup_scheduler
from src.templating.cached_engine import get_template_engine

logger = logging.getLogger(__name__)

class EnhancedApplication:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."""
    
    def __init__(self):
        self.app: Optional[FastAPI] = None
        self.backup_manager = None
        self.backup_scheduler = None
        self.metrics = None
        self.auth_manager = None
        self.template_engine = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        logger.info("üöÄ Initializing enhanced email marketing application...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        self.metrics = get_metrics()
        if self.metrics.enabled:
            await start_metrics_collection()
            logger.info("üìä Metrics collection started")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±—ç–∫–∞–ø–æ–≤
        db_path = os.getenv('SQLITE_DB_PATH', './data/mailing.sqlite3')
        self.backup_manager, self.backup_scheduler = initialize_backup_system(db_path)
        
        if self.backup_manager.config.enabled:
            await start_backup_scheduler()
            logger.info("üíæ Backup system started")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.auth_manager = get_auth_manager()
        logger.info("üîí Authentication system initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.template_engine = get_template_engine()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        if self.template_engine.cache_config.enabled:
            await self.template_engine.preload_templates()
            logger.info("üé® Template engine with caching initialized")
        
        logger.info("‚úÖ All systems initialized successfully")
    
    async def create_app(self) -> FastAPI:
        """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
        
        @asynccontextmanager
        async def lifespan(app: FastAPI):
            # Startup
            await self.initialize()
            yield
            # Shutdown
            await self.shutdown()
        
        self.app = FastAPI(
            title="Professional Email Marketing Tool - Enhanced",
            description="Enhanced version with authentication, caching, metrics, and backups",
            version="2.0.0",
            lifespan=lifespan
        )
        
        # Middleware –¥–ª—è HTTPS redirect (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        @self.app.middleware("http")
        async def https_redirect(request: Request, call_next):
            if os.getenv('FORCE_HTTPS', 'false').lower() == 'true':
                if request.url.scheme == 'http':
                    https_url = request.url.replace(scheme='https')
                    return RedirectResponse(url=str(https_url), status_code=301)
            return await call_next(request)
        
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"] if os.getenv('ENVIRONMENT') == 'development' else ["https://yourdomain.com"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã
        self._add_routes()
        
        return self.app
    
    def _add_routes(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
        
        @self.app.get("/health")
        async def health_check():
            """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
            status = {
                "status": "healthy",
                "timestamp": "2025-10-22T00:00:00Z",
                "version": "2.0.0",
                "environment": os.getenv('ENVIRONMENT', 'development'),
                "features": {
                    "authentication": self.auth_manager is not None,
                    "metrics": self.metrics.enabled if self.metrics else False,
                    "backups": self.backup_manager.config.enabled if self.backup_manager else False,
                    "template_cache": self.template_engine.cache_config.enabled if self.template_engine else False,
                    "https": load_https_config().enabled
                }
            }
            return status
        
        @self.app.get("/metrics")
        async def get_metrics_endpoint():
            """Endpoint –¥–ª—è Prometheus –º–µ—Ç—Ä–∏–∫."""
            if not self.metrics or not self.metrics.enabled:
                raise HTTPException(status_code=404, detail="Metrics not enabled")
            
            return PlainTextResponse(
                self.metrics.get_metrics(),
                media_type=self.metrics.get_content_type()
            )
        
        @self.app.get("/admin/cache/stats")
        async def get_cache_stats(current_user=Depends(get_current_user)):
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
            if not self.template_engine:
                raise HTTPException(status_code=404, detail="Template engine not available")
            
            return self.template_engine.get_cache_stats()
        
        @self.app.post("/admin/cache/clear")
        async def clear_cache(current_user=Depends(get_current_user)):
            """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
            if not self.template_engine:
                raise HTTPException(status_code=404, detail="Template engine not available")
            
            await self.template_engine.clear_cache()
            return {"message": "Cache cleared successfully"}
        
        @self.app.get("/admin/backup/list")
        async def list_backups(current_user=Depends(get_current_user)):
            """–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
            if not self.backup_manager:
                raise HTTPException(status_code=404, detail="Backup system not available")
            
            backups = await self.backup_manager.list_backups()
            return [
                {
                    "filename": backup.filename,
                    "timestamp": backup.timestamp.isoformat(),
                    "size_bytes": backup.size_bytes,
                    "compressed": backup.compressed,
                    "verified": backup.verified
                }
                for backup in backups
            ]
        
        @self.app.post("/admin/backup/create")
        async def create_backup(current_user=Depends(get_current_user)):
            """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
            if not self.backup_manager:
                raise HTTPException(status_code=404, detail="Backup system not available")
            
            backup_info = await self.backup_manager.create_backup("manual")
            if backup_info:
                return {
                    "message": "Backup created successfully",
                    "filename": backup_info.filename,
                    "size_bytes": backup_info.size_bytes
                }
            else:
                raise HTTPException(status_code=500, detail="Failed to create backup")
        
        @self.app.post("/auth/login")
        async def login(request: Request):
            """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            require_https(request)
            
            data = await request.json()
            username = data.get("username")
            password = data.get("password")
            
            if not username or not password:
                raise HTTPException(status_code=400, detail="Username and password required")
            
            try:
                user = self.auth_manager.authenticate_user(username, password)
                if not user:
                    raise HTTPException(status_code=401, detail="Invalid credentials")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                access_token = self.auth_manager.create_access_token(user)
                refresh_token = self.auth_manager.create_refresh_token(user)
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                session_id = self.auth_manager.create_session(user, request)
                
                response = {
                    "access_token": access_token,
                    "refresh_token": refresh_token,
                    "token_type": "bearer",
                    "user": {
                        "username": user.username,
                        "email": user.email,
                        "is_admin": user.is_admin
                    }
                }
                
                return response
                
            except Exception as e:
                logger.error(f"Login error: {e}")
                raise HTTPException(status_code=500, detail="Authentication failed")
        
        @self.app.get("/admin/stats")
        async def get_admin_stats(current_user=Depends(get_current_user)):
            """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
            stats = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
            if self.template_engine:
                stats["cache"] = self.template_engine.get_cache_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
            if self.metrics and self.metrics.enabled:
                stats["metrics"] = {
                    "enabled": True,
                    "prometheus_endpoint": "/metrics"
                }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤
            if self.backup_manager:
                backups = await self.backup_manager.list_backups()
                stats["backups"] = {
                    "total_backups": len(backups),
                    "latest_backup": backups[0].timestamp.isoformat() if backups else None,
                    "backup_enabled": self.backup_manager.config.enabled
                }
            
            return stats
    
    async def shutdown(self):
        """Graceful shutdown."""
        logger.info("üõë Shutting down enhanced application...")
        
        if self.backup_scheduler:
            await stop_backup_scheduler()
            logger.info("üíæ Backup scheduler stopped")
        
        if self.metrics and self.metrics.enabled:
            await stop_metrics_collection()
            logger.info("üìä Metrics collection stopped")
        
        logger.info("‚úÖ Shutdown complete")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
enhanced_app: Optional[EnhancedApplication] = None

async def get_enhanced_app() -> FastAPI:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    global enhanced_app
    if not enhanced_app:
        enhanced_app = EnhancedApplication()
    return await enhanced_app.create_app()

def create_production_app() -> FastAPI:
    """–°–æ–∑–¥–∞–µ—Ç production –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    import asyncio
    
    async def _create():
        return await get_enhanced_app()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º event loop
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    return loop.run_until_complete(_create())

# Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
create_enhanced_app = create_production_app

if __name__ == "__main__":
    import uvicorn
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    host = os.getenv('HOST', '0.0.0.0')
    port = int(os.getenv('PORT', '8080'))
    https_port = int(os.getenv('HTTPS_PORT', '8443'))
    
    # SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ssl_config = get_uvicorn_ssl_config()
    
    if ssl_config:
        # –ó–∞–ø—É—Å–∫ —Å HTTPS
        logger.info(f"üîí Starting HTTPS server on {host}:{https_port}")
        uvicorn.run(
            "src.enhanced_app:create_production_app",
            host=host,
            port=https_port,
            factory=True,
            **ssl_config
        )
    else:
        # –ó–∞–ø—É—Å–∫ —Å HTTP
        logger.info(f"üåê Starting HTTP server on {host}:{port}")
        uvicorn.run(
            "src.enhanced_app:create_production_app",
            host=host,
            port=port,
            factory=True
        )