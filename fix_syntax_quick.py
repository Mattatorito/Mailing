from pathlib import Path
import os
import re

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
–≤—ã–∑–≤–∞–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ docstrings"""

def fix_indentation_errors(file_path: Path) -> bool:"""–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ docstrings"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç fix indentation errors."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
    lines = f.readlines()

    fixed_lines = []
    i = 0
    changes_made = False

        while i < len(lines):
        line = lines[i]

            # –ü–∞—Ç—Ç–µ—Ä–Ω:
     —Ñ—É–Ω–∫—Ü–∏—è/–º–µ—Ç–æ–¥ + –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π docstringif re.match(r'^\s*(def |class |async def )', line):
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π docstring –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞
                if (i + 1 < len(lines) and lines[i + 1].strip().startswith('"""') andnot lines[i + 1].startswith('    """')):

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –≤ docstring
                indent = len(line) - len(line.lstrip())
                docstring_line = lines[i + 1]fixed_docstring = ' ' * (indent + 4) + docstring_line.lstrip()

                fixed_lines.append(line)
                fixed_lines.append(fixed_docstring)
                changes_made = True
                i += 2
                continue

            # –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ docstring –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞if (line.strip().startswith('"""') and not line.startswith('    """') and not line.startswith('"""')):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –æ—Ç—Å—Ç—É–øfixed_line = '    ' + line.lstrip()
            fixed_lines.append(fixed_line)
            changes_made = True
            i += 1
            continue

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ Python –∫–æ–¥–µif '""' in line and line.count('"') % 2 == 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                if i + 1 < len(lines):
                    next_line = lines[i + 1].strip()if not next_line.startswith('"'):
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—Éif line.rstrip().endswith(','):fixed_line = line.rstrip()[:-1] + '"\n'
                    else:fixed_line = line.rstrip() + '"\n'
                    fixed_lines.append(fixed_line)
                    changes_made = True
                    i += 1
                    continue

        fixed_lines.append(line)
        i += 1

        if changes_made:with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(fixed_lines)
            return True
        return False

    except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""project_root = Path("/Users/alexandr/Desktop/Projects/Scripts/Mailing")
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç main."""

    # –§–∞–π–ª—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    problem_files = ["data_loader/csv_loader.py","data_loader/json_loader.py",
    "data_loader/streaming.py","data_loader/excel_loader.py","data_loader/base.py",
    "mailing/config.py","mailing/logging_config.py","mailing/limits/daily_quota.py",
    "stats/aggregator.py","resend/client.py","gui/base_window.py",
    "gui/error_handling.py","gui/theme.py","gui/components.py"
    ]
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö...")
    print()

    fixed_count = 0

    for file_rel_path in problem_files:
    file_path = project_root / file_rel_path
        if file_path.exists():
            if fix_indentation_errors(file_path):print(f"‚úÖ {file_rel_path}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            fixed_count += 1
        else:print(f"‚ö™ {file_rel_path}: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

    print()print(f"üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")

if __name__ == "__main__":
    main()
