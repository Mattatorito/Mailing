import asyncio
import json
import sys

from datetime import datetime
import time

from persistence.db import get_connection

#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
sys.path.append(".")



async def real_time_monitoring():"""–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç real time monitoring."""
print("üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")print("=" * 60)print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")print("=" * 60)

    while True:
        try:
            # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)print("\033[2J\033[H", end="")

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–ºcurrent_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")print(f"üïí –í—Ä–µ–º—è: {current_time}")print("=" * 60)

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            conn = get_connection()
            cursor = conn.cursor()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫cursor.execute("SELECT COUNT(*) FROM deliveries")
            total_deliveries = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
            successful_deliveries = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 0")
            failed_deliveries = cursor.fetchone()[0]

            if total_deliveries > 0:
                success_rate = (successful_deliveries / total_deliveries) * 100
            else:
                success_rate = 0
print(f"üìß –î–û–°–¢–ê–í–ö–ò:")print(f"   üìä –í—Å–µ–≥–æ: {total_deliveries}")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_deliveries}")print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_deliveries}")print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

            # –°–æ–±—ã—Ç–∏—ècursor.execute("SELECT COUNT(*) FROM events")
            total_events = cursor.fetchone()[0]print(f"\nüéØ –°–æ–±—ã—Ç–∏—è: {total_events}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
            cursor.execute("""
                SELECT event_type, email_address, timestamp
                FROM events
                ORDER BY timestamp DESC
                LIMIT 3"""
            )
            recent_events = cursor.fetchall()
print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø:")
            if recent_events:
                for event in recent_events:print(f"   üîî {event[0]} ‚Üí {event[1]} ({event[2]})")
            else:print("   üì≠ –°–æ–±—ã—Ç–∏–π –Ω–µ—Ç")

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã —Å–µ–≥–æ–¥–Ω—ètoday = datetime.now().strftime("%Y-%m-%d")
            cursor.execute("""
                SELECT emails_sent
                FROM daily_usage
                WHERE usage_date = ?""",
                (today,),
            )
            result = cursor.fetchone()
            today_usage = result[0] if result else 0
print(f"\nüìÖ –ö–í–û–¢–ê –ù–ê –°–ï–ì–û–î–ù–Ø:")print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {today_usage}")print(f"   üìä –õ–∏–º–∏—Ç: 1000")print(f"   üìâ –û—Å—Ç–∞—Ç–æ–∫: {1000 - today_usage}")

            # –û—Ç–ø–∏—Å–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏cursor.execute("SELECT COUNT(*) FROM unsubscribes")
            unsubscribes = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM suppressions")
            suppressions = cursor.fetchone()[0]
print(f"\nüö´ –ë–õ–û–ö–ò–†–û–í–ö–ò:")print(f"   üì≠ –û—Ç–ø–∏—Å–æ–∫: {unsubscribes}")print(f"   üîí –í –±–ª–æ–∫-–ª–∏—Å—Ç–µ: {suppressions}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            cursor.execute("""
                SELECT recipient_email, success, provider, timestamp
                FROM deliveries
                ORDER BY timestamp DESC
                LIMIT 5"""
            )
            recent_deliveries = cursor.fetchall()
print(f"\nüìÆ –ü–û–°–õ–ï–î–ù–ò–ï –î–û–°–¢–ê–í–ö–ò:")
            if recent_deliveries:
                for delivery in recent_deliveries:status_icon = "‚úÖ" if delivery[1] else "‚ùå"provider = delivery[2] or "unknown"
                    print(f"   {status_icon} {delivery[0]} | {provider} | {delivery[3]}"
                    )
            else:print("   üì≠ –î–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ—Ç")

            conn.close()

            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ãprint(f"\n‚ö° –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")print(f"   üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω")print(f"   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞")print(f"   üåê Webhook —Å–µ—Ä–≤–µ—Ä: –ì–æ—Ç–æ–≤")print(f"   üì° Resend API: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
print("=" * 60)print("üí° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏!")print("   üìä –í—Å–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏–∑ —Ä–∞–±–æ—á–µ–π –±–∞–∑—ã")print("   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")

            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)

        except KeyboardInterrupt:print("\n\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(2)

if __name__ == "__main__":
    try:
        asyncio.run(real_time_monitoring())
    except KeyboardInterrupt:print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
