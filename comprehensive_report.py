        import sys
from pathlib import Path
import asyncio
import json
import os
import sqlite3
import sys

        import traceback
from datetime import datetime, timedelta

from data_loader.csv_loader import CSVLoader
from data_loader.json_loader import JSONLoader
from mailing.config import settings
from mailing.limits.daily_quota import DailyQuota
from persistence.db import get_connection
from persistence.repository import DeliveryRepository, SuppressionRepository
from resend.client import ResendClient
from stats.aggregator import StatsAggregator
from templating.engine import TemplateEngine
from validation.email_validator import validate_email_list

#!/usr/bin/env python3
"""
–ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –û–¢–ß–Å–¢ –û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –ü–†–û–ï–ö–¢–ê
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
sys.path.append(".")


# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

# from data_loader.excel_loader import ExcelLoader  # –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å openpyxl


def comprehensive_system_report():"""–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç comprehensive system report."""
print("üîç –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –û–¢–ß–Å–¢ –û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –ü–†–û–ï–ö–¢–ê")print("=" * 80)print(f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")print("=" * 80)

    # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    issues = []

    # 1. –ë–ê–ó–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–êprint("\n1Ô∏è‚É£ –ë–ê–ó–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê")print("-" * 40)

    # Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    total_tests += 1
    try:

        python_version = sys.version.split()[0]print(f"‚úÖ Python: {python_version}")if python_version >= "3.9":
            passed_tests += 1
        else:
            failed_tests += 1issues.append("Python –≤–µ—Ä—Å–∏—è < 3.9")
    except Exception as e:
        failed_tests += 1issues.append(f"Python –ø—Ä–æ–≤–µ—Ä–∫–∞: {e}")print(f"‚ùå Python: {e}")

    # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    total_tests += 1
    try:venv_path = Path(".venv")
        if venv_path.exists():print(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {venv_path.absolute()}")
            passed_tests += 1
        else:print(f"‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")issues.append("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            failed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"Venv –ø—Ä–æ–≤–µ—Ä–∫–∞: {e}")print(f"‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {e}")

    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    total_tests += 1
    try:requirements = Path("requirements.txt")
        if requirements.exists():deps = requirements.read_text().strip().split("\n")print(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(deps)} –ø–∞–∫–µ—Ç–æ–≤")
            passed_tests += 1
        else:print(f"‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            failed_tests += 1issues.append("requirements.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        failed_tests += 1issues.append(f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")print(f"‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")

    # 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´print("\n2Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")print("-" * 40)

    total_tests += 1
    try:
        print(f"‚úÖ API –∫–ª—é—á: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if settings.resend_api_key else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
        )print(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {settings.resend_from_email}")print(f"‚úÖ –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {settings.resend_from_name}")print(f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {settings.daily_email_limit}")print(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: {settings.concurrency}")print(f"‚úÖ Rate limit: {settings.rate_limit_per_minute}/–º–∏–Ω")print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.sqlite_db_path}")
        passed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")

    # 3. –ë–ê–ó–ê –î–ê–ù–ù–´–•print("\n3Ô∏è‚É£ –ë–ê–ó–ê –î–ê–ù–ù–´–•")print("-" * 40)

    total_tests += 1
    try:
        with get_connection() as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ãcursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]

            expected_tables = ["deliveries","events","unsubscribes","suppressions",
                "daily_usage",
            ]
            missing_tables = [t for t in expected_tables if t not in tables]

            if not missing_tables:print(f"‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã: {', '.join(tables)}")
                passed_tests += 1
            else:print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                failed_tests += 1issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Öcursor.execute("SELECT COUNT(*) FROM deliveries")
            deliveries_count = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM events")
            events_count = cursor.fetchone()[0]
print(f"üìä –ó–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç–∞–≤–æ–∫: {deliveries_count}")print(f"üìä –ó–∞–ø–∏—Å–µ–π —Å–æ–±—ã—Ç–∏–π: {events_count}")

    except Exception as e:
        failed_tests += 1issues.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

    # 4. –ó–ê–ì–†–£–ó–ß–ò–ö–ò –î–ê–ù–ù–´–•print("\n4Ô∏è‚É£ –ó–ê–ì–†–£–ó–ß–ò–ö–ò –î–ê–ù–ù–´–•")print("-" * 40)

    # CSV –∑–∞–≥—Ä—É–∑—á–∏–∫
    total_tests += 1
    try:
        csv_loader = CSVLoader()

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π CSVtest_csv = Path("test_data.csv")test_csv.write_text("email,name\ntest@example.com,Test User\n")
recipients = csv_loader.load("test_data.csv")if len(recipients) == 1 and recipients[0].email == "test@example.com":print("‚úÖ CSV –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            passed_tests += 1
        else:print("‚ùå CSV –∑–∞–≥—Ä—É–∑—á–∏–∫: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            failed_tests += 1issues.append("CSV –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        test_csv.unlink()  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª

    except Exception as e:
        failed_tests += 1issues.append(f"CSV –∑–∞–≥—Ä—É–∑—á–∏–∫: {e}")print(f"‚ùå CSV –∑–∞–≥—Ä—É–∑—á–∏–∫: {e}")

    # JSON –∑–∞–≥—Ä—É–∑—á–∏–∫
    total_tests += 1
    try:
        json_loader = JSONLoader()

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π JSONtest_json = Path("test_data.json")test_data = [{"email": "test@example.com", "name": "Test User"}]
        test_json.write_text(json.dumps(test_data))
recipients = json_loader.load("test_data.json")if len(recipients) == 1 and recipients[0].email == "test@example.com":print("‚úÖ JSON –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            passed_tests += 1
        else:print("‚ùå JSON –∑–∞–≥—Ä—É–∑—á–∏–∫: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            failed_tests += 1issues.append("JSON –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        test_json.unlink()  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª

    except Exception as e:
        failed_tests += 1issues.append(f"JSON –∑–∞–≥—Ä—É–∑—á–∏–∫: {e}")print(f"‚ùå JSON –∑–∞–≥—Ä—É–∑—á–∏–∫: {e}")

    # 5. –®–ê–ë–õ–û–ù–ò–ó–ê–¢–û–†print("\n5Ô∏è‚É£ –®–ê–ë–õ–û–ù–ò–ó–ê–¢–û–†")print("-" * 40)

    total_tests += 1
    try:
        engine = TemplateEngine()

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ωtest_template = Path("samples/test_render.html")
        test_template.parent.mkdir(exist_ok = True)
        test_template.write_text("""
<!DOCTYPE html>
<html>
<head><title>{{subject}}</title></head>
<body>
    <h1>–ü—Ä–∏–≤–µ—Ç, {{name}}!</h1>
    <p>Email: {{email}}</p>
</body>
</html>""".strip()
        )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        variables = {"subject": "–¢–µ—Å—Ç","name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "email": "test@example.com",
        }
result = engine.render("test_render.html", variables)

        if (result.subject == "–¢–µ—Å—Ç"and "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" in result.body_htmland "test@example.com" in result.body_html
        ):print("‚úÖ –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")print(f"   üìÑ HTML: {len(result.body_html)} —Å–∏–º–≤–æ–ª–æ–≤")print(f"   üìù Text: {len(result.body_text or '')} —Å–∏–º–≤–æ–ª–æ–≤")
            passed_tests += 1
        else:print("‚ùå –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            failed_tests += 1issues.append("–®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        test_template.unlink()  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª

    except Exception as e:
        failed_tests += 1issues.append(f"–®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä: {e}")print(f"‚ùå –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä: {e}")

    # 6. EMAIL –í–ê–õ–ò–î–ê–¢–û–†print("\n6Ô∏è‚É£ EMAIL –í–ê–õ–ò–î–ê–¢–û–†")print("-" * 40)

    total_tests += 1
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ emailvalid_emails = ["test@example.com", "user@domain.org", "name@company.ru"]invalid_emails = ["invalid", "@domain.com", "user@", "test@"]

        valid_results, valid_errors = validate_email_list(valid_emails)
        invalid_results, invalid_errors = validate_email_list(invalid_emails)

        if len(valid_results) == 3 and len(invalid_errors) == 4:print("‚úÖ Email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ: {len(valid_results)}")print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ: {len(invalid_errors)}")
            passed_tests += 1
        else:print("‚ùå Email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä: –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞")print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_results)}, –æ—à–∏–±–æ–∫: {len(invalid_errors)}")
            failed_tests += 1issues.append("Email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")

    except Exception as e:
        failed_tests += 1issues.append(f"Email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä: {e}")print(f"‚ùå Email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä: {e}")

    # 7. RESEND API –ö–õ–ò–ï–ù–¢print("\n7Ô∏è‚É£ RESEND API –ö–õ–ò–ï–ù–¢")print("-" * 40)

    total_tests += 1
    try:
        client = ResendClient()print("‚úÖ ResendClient —Å–æ–∑–¥–∞–Ω")print(f"   üåê Base URL: {settings.resend_base_url}")print(f"   üîÑ Max retries: {settings.max_retries}")print(f"   ‚è±Ô∏è  Timeout: {getattr(settings,
            'timeout', 30)}s")
        passed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"Resend –∫–ª–∏–µ–Ω—Ç: {e}")print(f"‚ùå Resend –∫–ª–∏–µ–Ω—Ç: {e}")

    # 8. –î–ù–ï–í–ù–´–ï –ö–í–û–¢–´print("\n8Ô∏è‚É£ –î–ù–ï–í–ù–´–ï –ö–í–û–¢–´")print("-" * 40)

    total_tests += 1
    try:
        quota = DailyQuota()
        quota.load()
print(f"‚úÖ –î–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {quota.used()}")print(f"   üìà –õ–∏–º–∏—Ç: {quota.limit}")print(f"   üìâ –û—Å—Ç–∞—Ç–æ–∫: {quota.remaining()}")print(f"   ‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: {'–î–∞' if quota.can_send() else '–ù–µ—Ç'}")
        passed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"–î–Ω–µ–≤–Ω—ã–µ –∫–≤–æ—Ç—ã: {e}")print(f"‚ùå –î–Ω–µ–≤–Ω—ã–µ –∫–≤–æ—Ç—ã: {e}")

    # 9. –†–ï–ü–û–ó–ò–¢–û–†–ò–òprint("\n9Ô∏è‚É£ –†–ï–ü–û–ó–ò–¢–û–†–ò–ò")print("-" * 40)

    total_tests += 1
    try:
        delivery_repo = DeliveryRepository()
        suppression_repo = SuppressionRepository()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = delivery_repo.stats()
print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")print(f"   üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {stats.get('total',
    0)}")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('success',
    0)}")print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats.get('failed', 0)}")
        passed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {e}")print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {e}")

    # 10. –ê–ì–†–ï–ì–ê–¢–û–† –°–¢–ê–¢–ò–°–¢–ò–ö–òprint("\nüîü –ê–ì–†–ï–ì–ê–¢–û–† –°–¢–ê–¢–ò–°–¢–ò–ö–ò")print("-" * 40)

    total_tests += 1
    try:
        aggregator = StatsAggregator()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        today_stats = aggregator.daily_stats()
        weekly_stats = aggregator.weekly_stats()
print("‚úÖ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")print(f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {today_stats}")print(f"   üìä –ó–∞ –Ω–µ–¥–µ–ª—é: {weekly_stats}")
        passed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")print(f"‚ùå –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # 11. –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–êprint("\n1Ô∏è‚É£1Ô∏è‚É£ –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê")print("-" * 40)

    critical_files = ["mailing/cli.py","mailing/sender.py","resend/client.py",
        "templating/engine.py","persistence/db.py","samples/template.html",
    ]

    for file_path in critical_files:
        total_tests += 1
        path = Path(file_path)
        if path.exists():
            size = path.stat().st_sizeprint(f"‚úÖ {file_path}: {size} –±–∞–π—Ç")
            passed_tests += 1
        else:print(f"‚ùå {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            failed_tests += 1issues.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")

    # 12. –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨print("\n1Ô∏è‚É£2Ô∏è‚É£ –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨")print("-" * 40)

    total_tests += 1
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—étest_file = Path("permission_test.tmp")test_file.write_text("test")
        test_file.unlink()
print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: –µ—Å—Ç—å")
        passed_tests += 1
    except Exception as e:
        failed_tests += 1issues.append(f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")print(f"‚ùå –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    total_tests += 1if settings.resend_api_key and not settings.resend_api_key.startswith("test_"):print("‚úÖ API –∫–ª—é—á: –Ω–∞—Å—Ç–æ—è—â–∏–π")
        passed_tests += 1
    else:print("‚ö†Ô∏è  API –∫–ª—é—á: —Ç–µ—Å—Ç–æ–≤—ã–π")issues.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á")
        failed_tests += 1

    # –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–óprint("\n" + "=" * 80)print("üéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò")print("=" * 80)

    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")print(f"   üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")print(f"   ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed_tests}")print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

    if success_rate >= 90:status = "üü¢ –û–¢–õ–ò–ß–ù–û"verdict = "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
    elif success_rate >= 75:status = "üü° –•–û–†–û–®–û"verdict = "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞, –µ—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
    elif success_rate >= 50:status = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"verdict = "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    else:status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û"verdict = "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
print(f"\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {status}")print(f"üí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: {verdict}")

    if issues:print(f"\n‚ö†Ô∏è  –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for i, issue in enumerate(issues, 1):print(f"   {i}. {issue}")

    # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–òprint(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if success_rate >= 90:print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")print("   üìß –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ email –∫–∞–º–ø–∞–Ω–∏–∏")print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:print("   üî® –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")print("   üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ")print("   üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
print("=" * 80)

    return {"total_tests": total_tests,"passed_tests": passed_tests,
        "failed_tests": failed_tests,"success_rate": success_rate,"status": status,
        "verdict": verdict,"issues": issues,
    }

if __name__ == "__main__":
    try:
        report = comprehensive_system_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        report_file = Path(f"system_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        report_file.write_text(json.dumps(report, ensure_ascii = False, indent = 2))
print(f"\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {report_file}")

    except Exception as e:print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–ß–Å–¢–ê: {e}")

        traceback.print_exc()
