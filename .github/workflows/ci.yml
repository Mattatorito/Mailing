# CI/CD Pipeline для Professional Email Marketing Tool
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Проверка качества кода
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy isort bandit safety
        
    - name: Run Black formatting check
      run: black --check --diff .
      
    - name: Run isort import sorting check
      run: isort --check-only --diff .
      
    - name: Run Flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run MyPy type checking
      run: mypy . --ignore-missing-imports
      
    - name: Run Bandit security check
      run: bandit -r . -f json -o bandit-report.json
      
    - name: Run Safety dependency check
      run: safety check --json
      
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Модульные тесты
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        
    - name: Run unit tests with coverage
      env:
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        SQLITE_DB_PATH: ':memory:'  # Use in-memory database for tests
      run: |
        # Set default values if secrets are not available
        export RESEND_API_KEY="${RESEND_API_KEY:-test-key-for-ci}"
        export WEBHOOK_SECRET="${WEBHOOK_SECRET:-test-secret-for-ci}"
        pytest tests/ --cov=mailing --cov=data_loader --cov=templating --cov=validation --cov=resend --cov=persistence --cov=stats --cov-report=xml --cov-report=html --cov-report=term-missing -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  # Интеграционные тесты
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
        
    - name: Run integration tests
      env:
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        SQLITE_DB_PATH: ':memory:'
      run: |
        # Set default values if secrets are not available
        export RESEND_API_KEY="${RESEND_API_KEY:-test-key-for-ci}"
        export WEBHOOK_SECRET="${WEBHOOK_SECRET:-test-secret-for-ci}"
        pytest tests/test_*_integration.py -v --tb=short
        
    - name: Test CLI functionality
      run: |
        python -m pytest tests/test_cli_extended.py -v
        
    - name: Test webhook server
      run: |
        python -m pytest tests/test_webhook_integration.py -v

  # Docker build и тестирование
  docker-tests:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      run: |
        docker build --target development -t email-marketing-tool:dev .
        
    - name: Build production image
      run: |
        docker build --target production -t email-marketing-tool:prod .
        
    - name: Test Docker development build
      run: |
        docker run --rm email-marketing-tool:dev python -m pytest --co -q
        
    - name: Test Docker production build
      run: |
        docker run --rm -d --name test-app -p 8080:8080 email-marketing-tool:prod
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-app
        
    - name: Test Docker Compose
      env:
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
      run: |
        # Создаем .env файл с переменными окружения (используем значения по умолчанию если секреты не заданы)
        echo "RESEND_API_KEY=${RESEND_API_KEY:-test-key-for-ci}" > .env
        echo "WEBHOOK_SECRET=${WEBHOOK_SECRET:-test-secret-for-ci}" >> .env
        docker-compose --profile test up --exit-code-from email-marketing-test

  # Проверка покрытия кода
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run coverage analysis
      run: |
        pytest --cov=mailing --cov=data_loader --cov=templating --cov=validation --cov=resend --cov=persistence --cov=stats --cov-report=json --cov-report=term-missing
        
    - name: Check coverage threshold
      run: |
        python -c "
        import json
        with open('coverage.json') as f:
            data = json.load(f)
        total = data['totals']['percent_covered']
        print(f'Total coverage: {total:.2f}%')
        if total < 90.0:
            print(f'Coverage {total:.2f}% is below required 90%')
            exit(1)
        else:
            print(f'Coverage {total:.2f}% meets requirement ✓')
        "

  # Проверка производительности
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark
        
    - name: Run performance tests
      run: |
        pytest tests/ -k "performance" --benchmark-only --benchmark-json=benchmark.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build и публикация Docker образов
  build-and-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-tests, coverage-check]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Docker Hub login отключен до настройки credentials
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: email-marketing-tool
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false  # Push отключен до настройки Docker Hub
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment (только для main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Здесь может быть интеграция с вашим deployment сервисом
        # Например, kubectl, helm, terraform, etc.
        echo "Deployment completed successfully"

  # Создание GitHub Release (только для тегов)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate release notes
      run: |
        echo "## Changes in this release" > release_notes.md
        echo "" >> release_notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        
    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./requirements.txt
        asset_name: requirements.txt
        asset_content_type: text/plain