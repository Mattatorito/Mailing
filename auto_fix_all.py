#!/usr/bin/env python3

import os
import ast
import re
import textwrap
from pathlib import Path
from typing import List, Tuple, Optional

class SmartIndentationFixer:
    """–£–º–Ω—ã–π —Ñ–∏–∫—Å–µ—Ä –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è Python —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self):
        self.fixed_files = 0
        self.failed_files = 0
        
    def fix_file(self, file_path: str) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª."""
        try:
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {file_path}")
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            fixed_content = self._apply_fixes(content)
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            try:
                ast.parse(fixed_content)
            except (SyntaxError, IndentationError) as e:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {e}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def _apply_fixes(self, content: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        lines = content.splitlines()
        fixed_lines = []
        
        i = 0
        while i < len(lines):
            line = lines[i]
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            fixed_line = self._fix_line(line, i, lines)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if self._is_docstring_line(fixed_line) and not self._is_properly_indented(fixed_line, fixed_lines):
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è docstring
                fixed_line = self._fix_docstring_indent(fixed_line, fixed_lines)
            
            if self._is_function_def_broken(line, i, lines):
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                fixed_line = self._fix_broken_function_def(i, lines)
                if isinstance(fixed_line, tuple):
                    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ –∫–æ—Ä—Ç–µ–∂, –∑–Ω–∞—á–∏—Ç –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                    fixed_lines.append(fixed_line[0])
                    i += fixed_line[1]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue
            
            fixed_lines.append(fixed_line)
            i += 1
        
        return '\n'.join(fixed_lines)
    
    def _fix_line(self, line: str, line_num: int, all_lines: List[str]) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç—Å—Ç—É–ø—ã
        if line.lstrip().startswith('import ') and line.startswith('    '):
            # –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ—Ç—Å—Ç—É–ø–æ–≤
            if line_num < 10:
                return line.lstrip()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–∏ –≥–¥–µ docstring —Å–∫–ª–µ–µ–Ω —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        if '"""' in line and ('def ' in line or 'class ' in line):
            parts = line.split('"""')
            if len(parts) >= 2:
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ docstring
                definition = parts[0].rstrip()
                docstring = '"""' + '"""'.join(parts[1:])
                return definition
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è docstring
        if line.strip().startswith('"""') and not line.startswith('    '):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è docstring
            return '    ' + line.lstrip()
        
        return line
    
    def _is_docstring_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ docstring."""
        stripped = line.strip()
        return stripped.startswith('"""') or stripped.startswith("'''")
    
    def _is_properly_indented(self, line: str, previous_lines: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã."""
        if not previous_lines:
            return True
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –∫–ª–∞—Å—Å–∞
        for prev_line in reversed(previous_lines[-10:]):  # –°–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
            if prev_line.strip().startswith(('def ', 'class ', 'async def ')):
                # docstring –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ—Ç—Å—Ç—É–ø –Ω–∞ 4 –ø—Ä–æ–±–µ–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                expected_indent = len(prev_line) - len(prev_line.lstrip()) + 4
                actual_indent = len(line) - len(line.lstrip())
                return actual_indent == expected_indent
        
        return True
    
    def _fix_docstring_indent(self, line: str, previous_lines: List[str]) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø –¥–ª—è docstring."""
        if not previous_lines:
            return line
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        for prev_line in reversed(previous_lines[-5:]):
            if prev_line.strip().startswith(('def ', 'class ', 'async def ')):
                base_indent = len(prev_line) - len(prev_line.lstrip())
                expected_indent = base_indent + 4
                return ' ' * expected_indent + line.lstrip()
        
        return line
    
    def _is_function_def_broken(self, line: str, line_num: int, all_lines: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
        if ':"""' in line and ('def ' in line or 'class ' in line):
            return True
        return False
    
    def _fix_broken_function_def(self, line_num: int, all_lines: List[str]) -> Tuple[str, int]:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
        line = all_lines[line_num]
        
        if ':"""' in line:
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ docstring
            parts = line.split(':"""')
            definition = parts[0] + ':'
            docstring_content = '"""' + '"""'.join(parts[1:])
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, docstring –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return definition, 0
        
        return line, 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤...")
    
    fixer = SmartIndentationFixer()
    root_dir = Path(".")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    error_files = []
    
    for py_file in root_dir.rglob("*.py"):
        if any(skip_dir in str(py_file) for skip_dir in ['.venv', '__pycache__', '.git']):
            continue
        
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            ast.parse(content)
        except (SyntaxError, IndentationError):
            error_files.append(str(py_file))
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(error_files)} —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in error_files:
        if fixer.fix_file(file_path):
            fixer.fixed_files += 1
        else:
            fixer.failed_files += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixer.fixed_files} —Ñ–∞–π–ª–æ–≤")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fixer.failed_files} —Ñ–∞–π–ª–æ–≤")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    remaining_errors = 0
    for py_file in root_dir.rglob("*.py"):
        if any(skip_dir in str(py_file) for skip_dir in ['.venv', '__pycache__', '.git']):
            continue
        
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            ast.parse(content)
        except (SyntaxError, IndentationError):
            remaining_errors += 1
    
    print(f"üîç –û—Å—Ç–∞–ª–æ—Å—å –æ—à–∏–±–æ–∫: {remaining_errors}")
    
    if remaining_errors == 0:
        print("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    main()