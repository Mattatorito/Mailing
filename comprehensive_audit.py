from pathlib import Path
import json
import os
import sqlite3
import sys

    import traceback
from datetime import datetime
import ast
import subprocess

#!/usr/bin/env python3
"""
üîç –ß–ï–°–¢–ù–´–ô –ò –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ü–†–û–ï–ö–¢–ê
–û–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
sys.path.append(".")

def comprehensive_project_audit():"""–ü—Ä–æ–≤–æ–¥–∏—Ç —á–µ—Å—Ç–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç comprehensive project audit."""
print("üîç –ß–ï–°–¢–ù–´–ô –ò –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ü–†–û–ï–ö–¢–ê")print("=" * 80)print(f"üìÖ –î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")print(f"üéØ –¶–µ–ª—å: –û–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")print("=" * 80)

    audit_results = {"timestamp": datetime.now().isoformat(),"sections": {},"issues": [],
    "recommendations": [],"overall_score": 0,
    }

    # 1. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –°–¢–†–£–ö–¢–£–†–êprint("\n1Ô∏è‚É£ –ê–£–î–ò–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ò –°–¢–†–£–ö–¢–£–†–´")print("-" * 60)

    architecture_score = 0
    architecture_issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞project_root = Path(".")
    expected_dirs = ["mailing","persistence","resend","templating","data_loader",
    "validation","stats","gui","tests","samples",
    ]

    existing_dirs = [
    d.name
        for d in project_root.iterdir()if d.is_dir() and not d.name.startswith(".")
    ]
    missing_dirs = [d for d in expected_dirs if d not in existing_dirs]
print(f"üìÅ –°–¢–†–£–ö–¢–£–†–ê –î–ò–†–ï–ö–¢–û–†–ò–ô:")print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: {len(existing_dirs)} –∏–∑ {len(expected_dirs)}")
    for d in existing_dirs:print(f"      üìÇ {d}")

    if missing_dirs:print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {missing_dirs}")architecture_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
    else:
    architecture_score += 25

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    key_files = ["requirements.txt","pyproject.toml","README.md","mailing/cli.py",
    "mailing/sender.py","persistence/db.py","resend/client.py",
    "templating/engine.py",
    ]
print(f"\nüìÑ –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ô–õ–´:")
    missing_files = []
    for file_path in key_files:
        if Path(file_path).exists():
        size = Path(file_path).stat().st_sizeprint(f"   ‚úÖ {file_path}: {size} –±–∞–π—Ç")
    else:print(f"   ‚ùå {file_path}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        missing_files.append(file_path)

    if not missing_files:
    architecture_score += 25
    else:architecture_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏if Path("requirements.txt").exists():with open("requirements.txt") as f:
            deps = [line.strip() for line in f if line.strip() and not line.startswith("#")
        ]print(f"\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: {len(deps)} –ø–∞–∫–µ—Ç–æ–≤")
    architecture_score += 25
    else:architecture_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç requirements.txt")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—åpython_files = list(Path(".").rglob("*.py"))print(f"\nüêç PYTHON –§–ê–ô–õ–´: {len(python_files)} —Ñ–∞–π–ª–æ–≤")

    large_files = []
    for py_file in python_files:
        if py_file.stat().st_size > 10000:  # > 10KB
        large_files.append((py_file, py_file.stat().st_size))

    if large_files:print(f"   ‚ö†Ô∏è –ö—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã (>10KB):")
        for file_path,size in sorted(large_files,key = lambda x: x[1], reverse = True)[
        :5
    ]:print(f"      üìÑ {file_path}: {size} –±–∞–π—Ç")

    architecture_score += 25  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ –Ω–∞–ª–∏—á–∏–µ Python —Ñ–∞–π–ª–æ–≤
print(f"\nüìä –û–¶–ï–ù–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´: {architecture_score}/100")

    # 2. –ö–ê–ß–ï–°–¢–í–û –ö–û–î–êprint(f"\n2Ô∏è‚É£ –ê–£–î–ò–¢ –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")print("-" * 60)

    code_quality_score = 0
    code_issues = []

    # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    import_issues = 0
    syntax_issues = 0

    for py_file in python_files:if "test_" in py_file.name or py_file.name.startswith("."):
        continue

        try:with open(py_file, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            try:
            ast.parse(content)
            except SyntaxError:
            syntax_issues += 1code_issues.append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {py_file}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ãif "from __future__ import annotations" not in content:
            import_issues += 1

        except Exception as e:code_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {py_file}: {e}")
print(f"üîç –ê–ù–ê–õ–ò–ó –ö–û–î–ê:")print(f"   üìÑ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")print(f"   ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {syntax_issues}")print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: {import_issues}")

    if syntax_issues == 0:
    code_quality_score += 40
    else:code_issues.append(f"–ù–∞–π–¥–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {syntax_issues}")

    if import_issues < len(python_files) * 0.1:  # < 10% —Ñ–∞–π–ª–æ–≤
    code_quality_score += 30

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    documented_files = 0
    for py_file in python_files[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
        try:with open(py_file, "r", encoding="utf-8") as f:
            content = f.read()
            if '"""' in content or "'''" in content:
            documented_files += 1
        except:
        pass

    doc_score = (documented_files / min(10, len(python_files))) * 30
    code_quality_score += doc_score
print(f"   üìö –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {documented_files}/10")print(f"\nüìä –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê: {code_quality_score:.0f}/100")

    # 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ïprint(f"\n3Ô∏è‚É£ –ê–£–î–ò–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")print("-" * 60)

    testing_score = 0
    testing_issues = []

    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ãtest_files = list(Path("tests").glob("test_*.py")) if Path("tests").exists() else []
print(f"üß™ –¢–ï–°–¢–û–í–´–ï –§–ê–ô–õ–´: {len(test_files)}")
    for test_file in test_files:
    size = test_file.stat().st_sizeprint(f"   üìã {test_file.name}: {size} –±–∞–π—Ç")

    if len(test_files) >= 10:
    testing_score += 40
    elif len(test_files) >= 5:
    testing_score += 25
    elif len(test_files) > 0:
    testing_score += 15
    else:testing_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pytest
    try:
    result = subprocess.run(["python", "-m", "pytest", "--version"],
        capture_output = True,
        text = True,cwd=".",
    )
        if result.returncode == 0:print(f"   ‚úÖ pytest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        testing_score += 20
    else:testing_issues.append("pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:testing_issues.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å pytest")

    # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    if test_files:
        try:
        result = subprocess.run(["python", "-m", "pytest", "--tb = no", "-q"],
            capture_output = True,
            text = True,cwd=".",
            timeout = 30,
        )
            if result.returncode == 0:print(f"   ‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Å–ø–µ—à–Ω–æ")
            testing_score += 40
        else:print(f"   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç")
            testing_score += 20testing_issues.append("–ï—Å—Ç—å –ø–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã")
        except subprocess.TimeoutExpired:testing_issues.append("–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
        except Exception as e:testing_issues.append(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
print(f"\nüìä –û–¶–ï–ù–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {testing_score}/100")

    # 4. –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –î–ê–ù–ù–´–ïprint(f"\n4Ô∏è‚É£ –ê–£–î–ò–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –î–ê–ù–ù–´–•")print("-" * 60)

    database_score = 0
    database_issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ödb_files = list(Path(".").glob("*.sqlite*")) + list(Path(".").glob("*.db"))

    if db_files:print(f"üíæ –§–ê–ô–õ–´ –ë–î: {len(db_files)}")

        for db_file in db_files:
        size = db_file.stat().st_sizeprint(f"   üìä {db_file}: {size} –±–∞–π—Ç")

            try:
            conn = sqlite3.connect(db_file)
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ücursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
print(f"      üìã –¢–∞–±–ª–∏—Ü: {len(tables)}")

            total_records = 0
                for (table_name,) in tables:cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                total_records += count
                    if count > 0:print(f"         {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
print(f"      üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")

                if len(tables) >= 3:
                database_score += 30
                if total_records > 0:
                database_score += 40

            conn.close()

            except Exception as e:database_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î {db_file}: {e}")

    database_score += 30  # –ó–∞ –Ω–∞–ª–∏—á–∏–µ –ë–î —Ñ–∞–π–ª–æ–≤
    else:database_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µsample_files = list(Path("samples").glob("*")) if Path("samples").exists() else []
    if sample_files:print(f"\nüìÇ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï: {len(sample_files)} —Ñ–∞–π–ª–æ–≤")
        for sample in sample_files:
        size = sample.stat().st_sizeprint(f"   üìÑ {sample.name}: {size} –±–∞–π—Ç")
print(f"\nüìä –û–¶–ï–ù–ö–ê –ë–î –ò –î–ê–ù–ù–´–•: {database_score}/100")

    # 5. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨print(f"\n5Ô∏è‚É£ –ê–£–î–ò–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")print("-" * 60)

    security_score = 0
    security_issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—èenv_vars = ["RESEND_API_KEY", "RESEND_FROM_EMAIL"]
    configured_vars = []

    for var in env_vars:
        if os.environ.get(var):
        configured_vars.append(var)print(f"   ‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:print(f"   ‚ùå {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")security_issues.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    if len(configured_vars) == len(env_vars):
    security_score += 40
    elif len(configured_vars) > 0:
    security_score += 20

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤
    hardcoded_secrets = 0secret_patterns = ["api_key", "password", "secret", "token"]

    for py_file in python_files[:20]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        try:with open(py_file, "r", encoding="utf-8") as f:
            content = f.read().lower()

            for pattern in secret_patterns:if f"{pattern}=" in content or f'{pattern}"' in content:
                hardcoded_secrets += 1
                break
        except:
        pass

    if hardcoded_secrets == 0:
    security_score += 30
    print(f"   ‚úÖ –•–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
    security_score += 10
    security_issues.append(f"–í–æ–∑–º–æ–∂–Ω—ã–π —Ö–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ {hardcoded_secrets} —Ñ–∞–π–ª–∞—Ö"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignoreif Path(".gitignore").exists():with open(".gitignore") as f:
        gitignore_content = f.read()
important_patterns = [".env", "*.sqlite", "*.db", "__pycache__", ".venv"]
    ignored_patterns = sum(
            1 for pattern in important_patterns if pattern in gitignore_content
    )

    security_score += (ignored_patterns / len(important_patterns)) * 30
    print(f"   üìù .gitignore –ø–æ–∫—Ä—ã–≤–∞–µ—Ç {ignored_patterns}/{len(important_patterns)} –≤–∞–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
    )
    else:security_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .gitignore")
print(f"\nüìä –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: {security_score:.0f}/100")

    # 6. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò –ú–û–ù–ò–¢–û–†–ò–ù–ìprint(f"\n6Ô∏è‚É£ –ê–£–î–ò–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")print("-" * 60)

    performance_score = 0
    performance_issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
    async_files = 0
    for py_file in python_files[:10]:
        try:with open(py_file, "r", encoding="utf-8") as f:
                content = f.read()if "async def" in content or "await " in content:
            async_files += 1
        except:
        pass

    if async_files > 0:
    performance_score += 40print(f"   ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: –Ω–∞–π–¥–µ–Ω–∞ –≤ {async_files} —Ñ–∞–π–ª–∞—Ö")
    else:performance_issues.append("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging_files = 0
    for py_file in python_files[:10]:
        try:with open(py_file, "r", encoding="utf-8") as f:
                content = f.read()if "logging" in content or "logger" in content:
            logging_files += 1
        except:
        pass

    if logging_files > 0:
    performance_score += 30print(f"   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ –≤ {logging_files} —Ñ–∞–π–ª–∞—Ö")
    else:performance_issues.append("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥monitoring_keywords = ["stats", "metrics", "monitor", "webhook"]
    monitoring_found = any(
        Path(d).exists() for d in monitoring_keywords if Path(d).is_dir()
    )

    if monitoring_found:
    performance_score += 30print(f"   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:performance_issues.append("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
print(f"\nüìä –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: {performance_score}/100")

    # 7. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –û–ü–´–¢print(f"\n7Ô∏è‚É£ –ê–£–î–ò–¢ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")print("-" * 60)

    documentation_score = 0
    documentation_issues = []

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    docs = {"README.md": 40,"CHANGELOG.md": 15,"INSTALL.md": 15,"LICENSE": 10,
    "requirements.txt": 20,
    }

    for doc, points in docs.items():
        if Path(doc).exists():
        size = Path(doc).stat().st_size
        documentation_score += pointsprint(f"   ‚úÖ {doc}: {size} –±–∞–π—Ç")
    else:documentation_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {doc}")
print(f"\nüìä –û–¶–ï–ù–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò: {documentation_score}/100")

    # 8. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–êprint(f"\n8Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ï–ö–¢–ê")print("=" * 80)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    scores = {"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": architecture_score,"–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞": code_quality_score,
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": testing_score,"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": database_score,
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": security_score,"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": performance_score,
    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": documentation_score,
    }

    overall_score = sum(scores.values()) / len(scores)
print(f"üìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –†–ê–ó–î–ï–õ–ê–ú:")
    for section, score in scores.items():
        if score >= 80:icon = "üü¢"
        elif score >= 60:icon = "üü°"
        elif score >= 40:icon = "üü†"
    else:icon = "üî¥"
print(f"   {icon} {section}: {score:.0f}/100")
print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {overall_score:.1f}/100")

    # –ì—Ä–∞–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–æ–∫
    if overall_score >= 90:grade = "A+"verdict = "–ü–†–ï–í–û–°–•–û–î–ù–û"color = "üü¢"
    elif overall_score >= 80:grade = "A"verdict = "–û–¢–õ–ò–ß–ù–û"color = "üü¢"
    elif overall_score >= 70:grade = "B+"verdict = "–•–û–†–û–®–û"color = "üü°"
    elif overall_score >= 60:grade = "B"verdict = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"color = "üü°"
    elif overall_score >= 50:grade = "C"verdict = "–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–û"color = "üü†"
    else:grade = "D"verdict = "–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"color = "üî¥"
print(f"\n{color} –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {grade} ({verdict})")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
    all_issues = (
    architecture_issues
    + code_issues
    + testing_issues
    + database_issues
    + security_issues
    + performance_issues
    + documentation_issues
    )

    if all_issues:print(f"\n‚ö†Ô∏è –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(all_issues)}):")
        for i, issue in enumerate(all_issues, 1):print(f"   {i}. {issue}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []

    if architecture_score < 80:recommendations.append("–£–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤")

    if code_quality_score < 70:recommendations.append("–ü–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")

    if testing_score < 60:recommendations.append("–†–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏")

    if database_score < 70:recommendations.append("–£–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    if security_score < 80:recommendations.append("–£—Å–∏–ª–∏—Ç—å –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    if performance_score < 70:recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

    if documentation_score < 70:recommendations.append("–£–ª—É—á—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞")

    if recommendations:print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        for i, rec in enumerate(recommendations, 1):print(f"   {i}. {rec}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    audit_results.update(
    {"overall_score": overall_score,"grade": grade,"verdict": verdict,
        "sections": scores,"issues": all_issues,"recommendations": recommendations,
    }
    )
print("=" * 80)

    return audit_results

if __name__ == "__main__":
    try:
    results = comprehensive_project_audit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Çtimestamp = datetime.now().strftime("%Y%m%d_%H%M%S")audit_file = f"project_audit_{timestamp}.json"
with open(audit_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii = False, indent = 2)
print(f"\nüíæ –ê–£–î–ò–¢ –°–û–•–†–ê–ù–Å–ù: {audit_file}")

    except Exception as e:print(f"\nüí• –û–®–ò–ë–ö–ê –ê–£–î–ò–¢–ê: {e}")

    traceback.print_exc()
