from __future__ import annotations
import sys
import os
import json
import subprocess
import threading
import time
from pathlib import Path
from typing import Optional, Dict, Any, List
from PySide6.QtWidgets import (
    QMainWindow, QWidget, QHBoxLayout, QVBoxLayout, QListWidget, QListWidgetItem,
    QLabel, QPushButton, QStackedWidget, QComboBox, QTextEdit, QFrame,
    QLineEdit, QFileDialog, QSpinBox, QCheckBox, QProgressBar, QGraphicsOpacityEffect, 
    QApplication, QTableWidget, QTableWidgetItem, QTabWidget, QSplitter, QGroupBox,
    QGridLayout, QMessageBox, QDialog, QFormLayout, QScrollArea, QTreeWidget, QTreeWidgetItem,
    QSizePolicy, QHeaderView
)

from PySide6.QtWidgets import QStyledItemDelegate

class ErrorDotDelegate(QStyledItemDelegate):
    """–î–µ–ª–µ–≥–∞—Ç —Ä–∏—Å—É–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–∂–æ–∫ –∏ —á–∏—Å–ª–æ –æ—à–∏–±–æ–∫ –≤ —è—á–µ–π–∫–µ."""
    def paint(self, painter, option, index):
        value = index.data()
        try:
            num = int(value)
        except (TypeError, ValueError):
            num = 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        if num == 0:
            color = QColor('#10B981')  # –∑–µ–ª–µ–Ω—ã–π - –Ω–µ—Ç –æ—à–∏–±–æ–∫
        elif num < 20:
            color = QColor('#F59E0B')  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π - –Ω–µ–º–Ω–æ–≥–æ
        elif num < 60:
            color = QColor('#F97316')  # —è—Ä–∫–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            color = QColor('#EF4444')  # –∫—Ä–∞—Å–Ω—ã–π - –º–Ω–æ–≥–æ

        painter.save()
        painter.setRenderHint(QPainter.Antialiasing)
        r = option.rect
        dot_size = min(r.height()-8, 14)
        dot_x = r.x() + 6
        dot_y = r.y() + (r.height() - dot_size) // 2
        painter.setBrush(color)
        painter.setPen(Qt.NoPen)
        painter.drawEllipse(dot_x, dot_y, dot_size, dot_size)

        # –¢–µ–∫—Å—Ç —á–∏—Å–ª–∞ –ø—Ä–∞–≤–µ–µ
        painter.setPen(QColor('#FFFFFF'))
        painter.drawText(dot_x + dot_size + 6, r.y(), r.width()-dot_size-12, r.height(), Qt.AlignVCenter | Qt.AlignLeft, str(num))
        painter.restore()

    def sizeHint(self, option, index):
        base = super().sizeHint(option, index)
        if base.height() < 28:
            base.setHeight(28)
        return base
from PySide6.QtCore import Qt, QPropertyAnimation, QTimer, Signal, QThread, QSize, QRect
from PySide6.QtGui import QFont, QPixmap, QIcon, QColor, QPainter, QPen, QPainterPath, QPalette
import logging
import asyncio
import httpx

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from .theme import ThemeManager
from .log_handler import QtLogHandler, install_qt_log_handler
from .mailer_service import MailerService
from .components import ModernButton
from .progress_ring import ProgressRing
from .text_field import FloatingTextField
from .switch import IOSSwitch
from .stats_card import StatsCard
from .segmented_control import SegmentedControl
from .layout_utils import apply_margins, apply_spacing, margins
from .typography import apply_heading_style, apply_text_style, make_page_title
from templating.html_highlighter import HtmlHighlighter

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π
from mailing.config import settings
from persistence.repository import DeliveryRepository, EventRepository
from mailing.limits.daily_quota import DailyQuota
from data_loader.csv_loader import CSVLoader
from data_loader.excel_loader import ExcelLoader
from data_loader.json_loader import JSONLoader
from validation.email_validator import validate_email_list

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
ENHANCED_SECTION_KEYS = [
    "section_dashboard",
    "section_campaigns", 
    "section_webhook_manager",
    "section_system_monitor",
    "section_config_manager",
    "section_template_editor",
    "section_statistics",
    "section_recipients",
    "section_logs",
    "section_settings",
]

class WebhookServerManager(QThread):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    server_started = Signal()
    server_stopped = Signal()
    server_error = Signal(str)
    server_output = Signal(str)
    
    def __init__(self):
        super().__init__()
        self.process = None
        self.running = False
        
    def start_server(self, port=8000):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.running:
            return
            
        try:
            cmd = [
                sys.executable, "-m", "uvicorn", 
                "mailing.webhook_server:app",
                "--host", "0.0.0.0",
                "--port", str(port),
                "--reload"
            ]
            
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                cwd=Path(__file__).parent.parent
            )
            
            self.running = True
            self.server_started.emit()
            self.start()  # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            
        except Exception as e:
            self.server_error.emit(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.process and self.running:
            self.process.terminate()
            self.process.wait()
            self.running = False
            self.server_stopped.emit()
    
    def run(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.process:
            return
            
        while self.running and self.process.poll() is None:
            line = self.process.stdout.readline()
            if line:
                self.server_output.emit(line.strip())
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
        if self.process.poll() is not None and self.running:
            self.running = False
            self.server_stopped.emit()

class SystemMonitorWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, theme_manager: ThemeManager):
        super().__init__()
        self.theme_manager = theme_manager
        self.delivery_repo = DeliveryRepository()
        self.event_repo = EventRepository()
        self.quota = DailyQuota()
        self.quota.load()
        
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_stats)
        self.timer.start(5000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        self.init_ui()
        self.update_stats()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 16, 16, 16)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(16)  # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        title = make_page_title("üìä System Monitor")
        layout.addWidget(title)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cards_layout = QHBoxLayout()

        self.db_card = StatsCard("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–ó–∞–≥—Ä—É–∑–∫–∞...", 0.0, accent=QColor('#8B5CF6'), parent=None, theme_manager=self.theme_manager, glyph="üóÑ")  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        self.quota_card = StatsCard("–ö–≤–æ—Ç—ã", "–ó–∞–≥—Ä—É–∑–∫–∞...", 0.0, accent=QColor('#F59E0B'), parent=None, theme_manager=self.theme_manager, glyph="üìä")  # –Ø–Ω—Ç–∞—Ä–Ω—ã–π
        self.webhook_card = StatsCard("Webhook —Å–µ—Ä–≤–µ—Ä", "–ó–∞–≥—Ä—É–∑–∫–∞...", 0.0, accent=QColor('#06B6D4'), parent=None, theme_manager=self.theme_manager, glyph="üîî")  # –¶–∏–∞–Ω

        cards_layout.addWidget(self.db_card)
        cards_layout.addWidget(self.quota_card)
        cards_layout.addWidget(self.webhook_card)

        layout.addLayout(cards_layout)
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        details_splitter = QSplitter(Qt.Horizontal)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫
        deliveries_group = QGroupBox("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        deliveries_group.setStyleSheet("""
            QGroupBox {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                font-weight: 600;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 8px;
                top: -2px;
                left: 10px;
                background-color: #2D3748;
                color: white;
                border-radius: 4px;
                font-weight: 600;
            }
        """)
        deliveries_layout = QVBoxLayout(deliveries_group)
        deliveries_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        deliveries_layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        
        self.deliveries_table = QTableWidget()
        self.deliveries_table.setColumnCount(3)
        self.deliveries_table.setHorizontalHeaderLabels([
            "Email", "–£—Å–ø–µ—Ö", "–û—à–∏–±–∫–∞"
        ])
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –≤–µ—Å—å –±–ª–æ–∫
        header = self.deliveries_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # Email —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –£—Å–ø–µ—Ö –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(2, QHeaderView.Stretch)  # –û—à–∏–±–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        self.deliveries_table.setColumnWidth(0, 300)  # Email - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        self.deliveries_table.setColumnWidth(1, 80)   # –£—Å–ø–µ—Ö
        self.deliveries_table.setColumnWidth(2, 250)  # –û—à–∏–±–∫–∞
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.deliveries_table.setStyleSheet("""
            QTableWidget {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 8px;
                color: white;
                gridline-color: #4A5568;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #4A5568;
            }
            QTableWidget::item:selected {
                background-color: #6366F1;
            }
            QHeaderView::section {
                background-color: #374151;
                color: white;
                padding: 12px;
                border: none;
                font-weight: bold;
            }
            QTableCornerButton::section {
                background-color: #2D3748;
                border: 1px solid #4A5568;
            }
        """)
        self.deliveries_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        deliveries_layout.addWidget(self.deliveries_table)
        
        # –¢–∞–±–ª–∏—Ü–∞ webhook —Å–æ–±—ã—Ç–∏–π
        events_group = QGroupBox("Webhook —Å–æ–±—ã—Ç–∏—è")
        events_group.setStyleSheet("""
            QGroupBox {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                font-weight: 600;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 8px;
                top: -2px;
                left: 10px;
                background-color: #2D3748;
                color: white;
                border-radius: 4px;
                font-weight: 600;
            }
        """)
        events_layout = QVBoxLayout(events_group)
        events_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        events_layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        
        self.events_table = QTableWidget()
        # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 3 —Å—Ç–æ–ª–±—Ü–æ–≤: Email, –ü–æ–¥–ø–∏—Å—å, –í—Ä–µ–º—è
        self.events_table.setColumnCount(3)
        self.events_table.setHorizontalHeaderLabels([
            "Email", "–ü–æ–¥–ø–∏—Å—å", "–í—Ä–µ–º—è"
        ])
        header = self.events_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # Email —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –ü–æ–¥–ø–∏—Å—å
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –í—Ä–µ–º—è
        self.events_table.setColumnWidth(0, 300)
        self.events_table.setColumnWidth(1, 80)
        self.events_table.setColumnWidth(2, 160)
        # –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π header (–ª–µ–≤—ã–π —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        self.events_table.verticalHeader().setVisible(False)
        self.events_table.setShowGrid(False)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.events_table.setStyleSheet("""
            QTableWidget {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 8px;
                color: white;
                gridline-color: #4A5568;
            }
            QTableWidget::item {
                padding: 10px;
                border-bottom: 1px solid #4A5568;
            }
            QTableWidget::item:selected {
                background-color: #6366F1;
            }
            QHeaderView::section {
                background-color: #374151;
                color: white;
                padding: 10px;
                border: none;
                font-weight: bold;
            }
            QTableCornerButton::section {
                background-color: #2D3748;
                border: 1px solid #4A5568;
            }
        """)
        self.events_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        events_layout.addWidget(self.events_table)
        
        details_splitter.addWidget(deliveries_group)
        details_splitter.addWidget(events_group)
        
        layout.addWidget(details_splitter)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        system_info_layout = QVBoxLayout(system_info_group)

        self.system_info_text = QTextEdit()
        self.system_info_text.setReadOnly(True)
        # –£–¥–∞–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ ‚Äì —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π
        self.system_info_text.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.system_info_text.setLineWrapMode(QTextEdit.WidgetWidth)
        self.system_info_text.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.system_info_text.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.system_info_text.setStyleSheet("QTextEdit { background: #1E2530; border: 1px solid #2F3A46; border-radius: 8px; padding: 16px; font-size: 13px; }")
        system_info_layout.addWidget(self.system_info_text, 1)

        layout.addWidget(system_info_group)
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            stats = self.delivery_repo.stats()
            total = stats['total']
            success_rate = (stats['success'] / max(total, 1)) * 100
            self.db_card.setValue(f"{total} –¥–æ—Å—Ç–∞–≤–æ–∫")
            self.db_card.setProgress(success_rate / 100)
            
            # –ö–≤–æ—Ç—ã
            used = self.quota.used()
            limit = self.quota.limit
            quota_percent = (used / limit) * 100
            self.quota_card.setValue(f"{used}/{limit}")
            self.quota_card.setProgress(quota_percent / 100)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
            try:
                import httpx
                with httpx.Client(timeout=1.0) as client:
                    response = client.get("http://localhost:8000/health")
                    if response.status_code == 200:
                        self.webhook_card.setValue("–†–∞–±–æ—Ç–∞–µ—Ç")
                        self.webhook_card.setProgress(1.0)
                    else:
                        self.webhook_card.setValue("–û—à–∏–±–∫–∞")
                        self.webhook_card.setProgress(0.0)
            except:
                self.webhook_card.setValue("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.webhook_card.setProgress(0.0)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            self.update_deliveries_table()
            self.update_events_table()
            self.update_system_info()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def update_deliveries_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∞–≤–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            deliveries = self.delivery_repo.get_recent_deliveries(50)
            
            self.deliveries_table.setRowCount(len(deliveries))
            
            for row, delivery in enumerate(deliveries):
                # Email
                self.deliveries_table.setItem(row, 0, QTableWidgetItem(delivery['email']))
                
                # Status
                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if delivery['success'] else "‚ùå –û—à–∏–±–∫–∞"
                status_item = QTableWidgetItem(status)
                if delivery['success']:
                    status_item.setBackground(QColor('#10B981'))
                else:
                    status_item.setBackground(QColor('#EF4444'))
                self.deliveries_table.setItem(row, 1, status_item)
                
                # Error
                error_text = delivery['error'] or '-'
                if len(error_text) > 80:
                    error_text = error_text[:77] + '...'
                self.deliveries_table.setItem(row, 2, QTableWidgetItem(error_text))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∞–≤–æ–∫: {e}")
    
    def update_events_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π"""
        try:
            events = self.event_repo.get_recent_events(15)
            self.events_table.setRowCount(len(events))

            for row, event in enumerate(events):
                # –ö–æ–ª–æ–Ω–∫–∏: Email (—Ç–∏–ø —Å–æ–±—ã—Ç–∏—è), –ü–æ–¥–ø–∏—Å—å (–≤–∞–ª–∏–¥–Ω–∞/–Ω–µ—Ç), –í—Ä–µ–º—è
                self.events_table.setItem(row, 0, QTableWidgetItem(str(event.get('recipient') or event.get('event_type') or '')))
                self.events_table.setItem(row, 1, QTableWidgetItem("‚úÖ" if event.get('signature_valid') else "‚ùå"))
                self.events_table.setItem(row, 2, QTableWidgetItem(str(event.get('created_at', ''))))
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π: {e}")
    
    def update_system_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            info_text = f"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
‚Ä¢ Resend API: {'‚úÖ' if settings.resend_api_key else '‚ùå'}
‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {settings.daily_email_limit}
‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {settings.concurrency}
‚Ä¢ –õ–∏–º–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏: {settings.rate_limit_per_minute}/–º–∏–Ω

–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ü—É—Ç—å: {settings.sqlite_db_path}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {self.delivery_repo.stats()['total']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(self.event_repo.get_recent_events(1000))}

–ö–≤–æ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {self.quota.used()}/{self.quota.limit}
‚Ä¢ –î–∞—Ç–∞: {self.quota.current_day()}
"""
            self.system_info_text.setPlainText(info_text.strip())
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

class ConfigManagerWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, theme_manager: ThemeManager):
        super().__init__()
        self.theme_manager = theme_manager
        self.env_file_path = Path(".env")
        self.init_ui()
        self.load_config()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 16, 16, 16)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(16)  # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title = make_page_title("‚öôÔ∏è Config Manager")
        layout.addWidget(title)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning = QLabel("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        warning.setStyleSheet("color: orange; margin-bottom: 20px;")
        layout.addWidget(warning)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        scroll = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QFormLayout(scroll_widget)
        
        # –ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_fields = {}
        
        config_sections = [
            ("Resend –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", [
                ("RESEND_API_KEY", "API –∫–ª—é—á Resend", "password"),
                ("RESEND_FROM_EMAIL", "Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è Resend", "text"),
                ("RESEND_FROM_NAME", "–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è Resend", "text"),
            ]),
            ("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", [
                ("DAILY_EMAIL_LIMIT", "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–∏—Å–µ–º", "number"),
                ("RATE_LIMIT_PER_MINUTE", "–õ–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É", "number"),
                ("MAX_RETRIES", "–ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤", "number"),
                ("CONCURRENCY", "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å", "number"),
                ("SQLITE_DB_PATH", "–ü—É—Ç—å –∫ –ë–î", "text"),
                ("LOG_LEVEL", "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "combo"),
            ])
        ]
        
        for section_name, fields in config_sections:
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–µ–∫—Ü–∏–∏
            section_label = QLabel(section_name)
            section_label.setStyleSheet("font-weight: bold; color: #0066cc; margin-top: 15px;")
            scroll_layout.addRow(section_label)
            
            for env_key, label, field_type in fields:
                if field_type == "password":
                    field = QLineEdit()
                    field.setEchoMode(QLineEdit.Password)
                elif field_type == "number":
                    field = QSpinBox()
                    field.setRange(0, 100000)
                elif field_type == "combo" and env_key == "LOG_LEVEL":
                    field = QComboBox()
                    field.addItems(["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])
                else:
                    field = QLineEdit()
                
                self.config_fields[env_key] = field
                scroll_layout.addRow(label + ":", field)
        
        scroll.setWidget(scroll_widget)
        scroll.setWidgetResizable(True)
        layout.addWidget(scroll)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.load_button = ModernButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        self.load_button.clicked.connect(self.load_config)
        
        self.save_button = ModernButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", variant="primary", theme_manager=self.theme_manager)
        self.save_button.clicked.connect(self.save_config)
        
        self.reset_button = ModernButton("–°–±—Ä–æ—Å", variant="tertiary", theme_manager=self.theme_manager)
        self.reset_button.clicked.connect(self.reset_config)
        
        buttons_layout.addWidget(self.load_button)
        buttons_layout.addWidget(self.save_button)
        buttons_layout.addWidget(self.reset_button)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
            env_vars = {}
            if self.env_file_path.exists():
                with open(self.env_file_path, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            env_vars[key.strip()] = value.strip().strip('"\'')
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            for env_key, field in self.config_fields.items():
                value = env_vars.get(env_key, "")
                
                if isinstance(field, QLineEdit):
                    field.setText(value)
                elif isinstance(field, QSpinBox):
                    try:
                        field.setValue(int(value) if value else 0)
                    except ValueError:
                        field.setValue(0)
                elif isinstance(field, QComboBox):
                    index = field.findText(value)
                    if index >= 0:
                        field.setCurrentIndex(index)
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ .env —Ñ–∞–π–ª"""
        try:
            lines = []
            lines.append("# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            lines.append("# –°–æ–∑–¥–∞–Ω–æ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
            lines.append("")
            
            current_section = ""
            for env_key, field in self.config_fields.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
                if env_key.startswith("RESEND_") and current_section != "RESEND":
                    lines.append("# Resend –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    current_section = "RESEND"
                elif not env_key.startswith(("RESEND_",)) and current_section != "GENERAL":
                    lines.append("# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    current_section = "GENERAL"
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if isinstance(field, QLineEdit):
                    value = field.text().strip()
                elif isinstance(field, QSpinBox):
                    value = str(field.value())
                elif isinstance(field, QComboBox):
                    value = field.currentText()
                else:
                    value = ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                if value:
                    lines.append(f"{env_key}={value}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(self.env_file_path, 'w') as f:
                f.write("\\n".join(lines))
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", 
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\\n\\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def reset_config(self):
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?",
            QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            for field in self.config_fields.values():
                if isinstance(field, QLineEdit):
                    field.clear()
                elif isinstance(field, QSpinBox):
                    field.setValue(0)
                elif isinstance(field, QComboBox):
                    field.setCurrentIndex(0)

class WebhookManagerWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook —Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    def __init__(self, theme_manager: ThemeManager):
        super().__init__()
        self.theme_manager = theme_manager
        self.server_manager = WebhookServerManager()
        self.server_manager.server_started.connect(self.on_server_started)
        self.server_manager.server_stopped.connect(self.on_server_stopped)
        self.server_manager.server_error.connect(self.on_server_error)
        self.server_manager.server_output.connect(self.on_server_output)
        
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 16, 16, 16)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(16)  # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title = make_page_title("üîó Webhook Manager")
        layout.addWidget(title)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
        server_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Webhook —Å–µ—Ä–≤–µ—Ä–æ–º")
        server_layout = QVBoxLayout(server_group)
        
        # –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∏
        status_layout = QHBoxLayout()
        
        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.status_label.setStyleSheet("font-weight: bold;")
        
        self.start_button = ModernButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å", variant="primary", theme_manager=self.theme_manager)
        self.start_button.clicked.connect(self.start_server)
        
        self.stop_button = ModernButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        self.stop_button.clicked.connect(self.stop_server)
        self.stop_button.setEnabled(False)
        
        self.test_button = ModernButton("–¢–µ—Å—Ç", variant="tertiary", theme_manager=self.theme_manager)
        self.test_button.clicked.connect(self.test_server)
        
        status_layout.addWidget(self.status_label)
        status_layout.addStretch()
        status_layout.addWidget(self.start_button)
        status_layout.addWidget(self.stop_button)
        status_layout.addWidget(self.test_button)
        
        server_layout.addLayout(status_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞
        port_layout = QHBoxLayout()
        port_layout.addWidget(QLabel("–ü–æ—Ä—Ç:"))
        
        self.port_spinbox = QSpinBox()
        self.port_spinbox.setRange(1000, 65535)
        self.port_spinbox.setValue(8000)
        port_layout.addWidget(self.port_spinbox)
        port_layout.addStretch()
        
        server_layout.addLayout(port_layout)
        
        # –õ–æ–≥ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_log = QTextEdit()
        self.server_log.setReadOnly(True)
        self.server_log.setMaximumHeight(200)
        server_layout.addWidget(QLabel("–õ–æ–≥ —Å–µ—Ä–≤–µ—Ä–∞:"))
        server_layout.addWidget(self.server_log)
        
        layout.addWidget(server_group)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
        test_group = QGroupBox("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Webhook Endpoints")
        test_layout = QVBoxLayout(test_group)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_buttons_layout = QHBoxLayout()
        
        self.test_health_button = ModernButton("Health Check", theme_manager=self.theme_manager)
        self.test_health_button.clicked.connect(self.test_health)
        
        self.test_resend_button = ModernButton("Resend Webhook", theme_manager=self.theme_manager)
        self.test_resend_button.clicked.connect(self.test_resend_webhook)
        
        
        self.view_events_button = ModernButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π", theme_manager=self.theme_manager)
        self.view_events_button.clicked.connect(self.view_events)
        
        test_buttons_layout.addWidget(self.test_health_button)
        test_buttons_layout.addWidget(self.test_resend_button)
        test_buttons_layout.addWidget(self.view_events_button)
        
        test_layout.addLayout(test_buttons_layout)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.test_results = QTextEdit()
        self.test_results.setReadOnly(True)
        self.test_results.setMaximumHeight(150)
        test_layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:"))
        test_layout.addWidget(self.test_results)
        
        layout.addWidget(test_group)
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        port = self.port_spinbox.value()
        self.server_manager.start_server(port)
        self.server_log.append(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_manager.stop_server()
        self.server_log.append("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    def test_server(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        threading.Thread(target=self._test_server_async, daemon=True).start()
    
    def _test_server_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            port = self.port_spinbox.value()
            try:
                import httpx
                with httpx.Client(timeout=5.0) as client:
                    response = client.get(f"http://localhost:{port}/health")
                    if response.status_code == 200:
                        QTimer.singleShot(0, lambda: self.test_results.append("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"))
                    else:
                        QTimer.singleShot(0, lambda: self.test_results.append(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}"))
            except ImportError:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –µ—Å–ª–∏ httpx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                import urllib.request
                import urllib.error
                try:
                    with urllib.request.urlopen(f"http://localhost:{port}/health", timeout=5) as response:
                        if response.status == 200:
                            QTimer.singleShot(0, lambda: self.test_results.append("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"))
                        else:
                            QTimer.singleShot(0, lambda: self.test_results.append(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}"))
                except urllib.error.URLError as e:
                    QTimer.singleShot(0, lambda: self.test_results.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"))
        except Exception as e:
            QTimer.singleShot(0, lambda: self.test_results.append(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"))
            import traceback
            traceback.print_exc()
    
    def test_health(self):
        """–¢–µ—Å—Ç health endpoint"""
        threading.Thread(target=self._test_health_async, daemon=True).start()
    
    def _test_health_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç health"""
        try:
            port = self.port_spinbox.value()
            try:
                import httpx
                with httpx.Client(timeout=5.0) as client:
                    response = client.get(f"http://localhost:{port}/health")
                    message = f"Health: {response.status_code} - {response.text}"
                    QTimer.singleShot(0, lambda msg=message: self.test_results.append(msg))
            except ImportError:
                import urllib.request
                import urllib.error
                try:
                    with urllib.request.urlopen(f"http://localhost:{port}/health", timeout=5) as response:
                        data = response.read().decode('utf-8')
                        self.test_results.append(f"Health: {response.status} - {data}")
                except urllib.error.URLError as e:
                    self.test_results.append(f"Health test error: {e}")
        except Exception as e:
            self.test_results.append(f"Health test error: {e}")
            import traceback
            traceback.print_exc()
    
    def test_resend_webhook(self):
        """–¢–µ—Å—Ç Resend webhook"""
        threading.Thread(target=self._test_resend_async, daemon=True).start()
    
    def _test_resend_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Resend webhook"""
        try:
            port = self.port_spinbox.value()
            test_data = {
                "type": "email.delivered",
                "data": {
                    "email_id": "gui_test_123",
                    "to": "test@example.com"
                }
            }
            
            try:
                import httpx
                with httpx.Client(timeout=5.0) as client:
                    response = client.post(
                        f"http://localhost:{port}/resend/webhook",
                        json=test_data,
                        headers={"Content-Type": "application/json"}
                    )
                    self.test_results.append(f"Resend webhook: {response.status_code} - {response.text}")
            except ImportError:
                import urllib.request
                import urllib.error
                import json
                try:
                    data = json.dumps(test_data).encode('utf-8')
                    req = urllib.request.Request(
                        f"http://localhost:{port}/resend/webhook",
                        data=data,
                        headers={'Content-Type': 'application/json'}
                    )
                    with urllib.request.urlopen(req, timeout=5) as response:
                        result = response.read().decode('utf-8')
                        self.test_results.append(f"Resend webhook: {response.status} - {result}")
                except urllib.error.URLError as e:
                    self.test_results.append(f"Resend webhook error: {e}")
        except Exception as e:
            self.test_results.append(f"Resend webhook error: {e}")
            import traceback
            traceback.print_exc()
    
    
    def view_events(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π"""
        threading.Thread(target=self._view_events_async, daemon=True).start()
    
    def _view_events_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π"""
        try:
            port = self.port_spinbox.value()
            try:
                import httpx
                with httpx.Client(timeout=5.0) as client:
                    response = client.get(f"http://localhost:{port}/events?limit=5")
                    if response.status_code == 200:
                        events = response.json()
                        self.test_results.append(f"–°–æ–±—ã—Ç–∏—è ({len(events)}):")
                        for event in events[:3]:
                            self.test_results.append(f"  ‚Ä¢ {event.get('event_type')} - {event.get('recipient')}")
                    else:
                        self.test_results.append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {response.status_code}")
            except ImportError:
                import urllib.request
                import urllib.error
                import json
                try:
                    with urllib.request.urlopen(f"http://localhost:{port}/events?limit=5", timeout=5) as response:
                        data = response.read().decode('utf-8')
                        events = json.loads(data)
                        self.test_results.append(f"–°–æ–±—ã—Ç–∏—è ({len(events)}):")
                        for event in events[:3]:
                            self.test_results.append(f"  ‚Ä¢ {event.get('event_type')} - {event.get('recipient')}")
                except urllib.error.URLError as e:
                    self.test_results.append(f"Events error: {e}")
                except json.JSONDecodeError as e:
                    self.test_results.append(f"JSON decode error: {e}")
        except Exception as e:
            self.test_results.append(f"Events error: {e}")
            import traceback
            traceback.print_exc()
    
    def on_server_started(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω")
        self.status_label.setStyleSheet("font-weight: bold; color: green;")
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
    
    def on_server_stopped(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.status_label.setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.status_label.setStyleSheet("font-weight: bold; color: red;")
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
    
    def on_server_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_log.append(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
    
    def on_server_output(self, output):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_log.append(output)

class SquareCheckBox(QCheckBox):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —á–µ–∫–±–æ–∫—Å: –ø—É—Å—Ç–æ–π –∫–≤–∞–¥—Ä–∞—Ç + –±–µ–ª–∞—è –≥–∞–ª–æ—á–∫–∞ –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏."""
    def __init__(self, text: str = '', parent=None, box_size: int = 18):
        super().__init__(text, parent)
        self._hover = False
        self._pressed = False
        self._box_size = box_size
        self.setCursor(Qt.PointingHandCursor)
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏
        self.setStyleSheet("QCheckBox{spacing:8px;}")

    def enterEvent(self, e):
        self._hover = True
        self.update()
        super().enterEvent(e)

    def leaveEvent(self, e):
        self._hover = False
        self.update()
        super().leaveEvent(e)

    def mousePressEvent(self, e):
        self._pressed = True
        self.update()
        super().mousePressEvent(e)

    def mouseReleaseEvent(self, e):
        self._pressed = False
        self.update()
        super().mouseReleaseEvent(e)

    def sizeHint(self):
        fm = self.fontMetrics()
        text_w = fm.horizontalAdvance(self.text())
        h = max(self._box_size, fm.height()) + 4
        return QSize(self._box_size + 8 + text_w, h)

    def paintEvent(self, event):
        p = QPainter(self)
        p.setRenderHint(QPainter.Antialiasing)
        rect = self.rect()
        box = self._box_size
        x = 0
        y = (rect.height() - box) // 2
        box_rect = QRect(x, y, box, box)

        # –¶–≤–µ—Ç–∞
        border_color = QColor('#4A5568')
        if self.isChecked():
            border_color = QColor('#6366F1')
        if self._hover:
            # –õ—ë–≥–∫–æ–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ hover
            if not self.isChecked():
                border_color = QColor('#6366F1')
        fill_color = QColor(0,0,0,0)  # –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        if self._pressed:
            fill_color = QColor(255,255,255,20)

        # –†–∏—Å—É–µ–º —Ñ–æ–Ω (–æ—á–µ–Ω—å –ª—ë–≥–∫–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)
        if fill_color.alpha() > 0:
            p.setPen(Qt.NoPen)
            p.setBrush(fill_color)
            p.drawRoundedRect(box_rect, 4, 4)

        # –†–∞–º–∫–∞
        pen = QPen(border_color, 2)
        p.setPen(pen)
        p.setBrush(Qt.NoBrush)
        p.drawRoundedRect(box_rect.adjusted(1,1,-1,-1), 4, 4)

        # –ì–∞–ª–æ—á–∫–∞
        if self.isChecked():
            path = QPainterPath()
            # –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
            path.moveTo(x + box*0.22, y + box*0.55)
            path.lineTo(x + box*0.45, y + box*0.78)
            path.lineTo(x + box*0.80, y + box*0.28)
            tick_pen = QPen(QColor('#FFFFFF'), 2.4, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin)
            p.setPen(tick_pen)
            p.drawPath(path)

        # –¢–µ–∫—Å—Ç
        p.setPen(QColor('#FFFFFF'))
        fm = p.fontMetrics()
        text_x = x + box + 8
        text_y = (rect.height() + fm.ascent() - fm.descent()) // 2
        p.drawText(text_x, text_y, self.text())

        p.end()


class EnhancedMainWindow(QMainWindow):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, theme_manager: ThemeManager):
        super().__init__()
        self.theme_manager = theme_manager
        self._mailer = MailerService()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ mailer'–∞
        self._mailer.started.connect(self._on_mailer_started)
        self._mailer.progress.connect(self._on_mailer_progress)
        self._mailer.finished.connect(self._on_mailer_finished)
        self._mailer.error.connect(self._on_mailer_error)
        self._mailer.cancelled.connect(self._on_mailer_cancelled)
        
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ - –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        self.setMinimumSize(1200, 800)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.resize(1400, 900)
        
        self._init_ui()
        self._init_log_handler()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ç–µ–º—ã
        self.theme_manager.paletteChanged.connect(self._on_palette_changed)
    
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        root = QWidget()
        layout = QHBoxLayout(root)
        layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        sidebar = QFrame()
        sidebar.setObjectName("Sidebar")
        sidebar.setFixedWidth(280)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞
        side_layout = QVBoxLayout(sidebar)
        side_layout.setContentsMargins(16, 16, 16, 16)  # –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ —Å–∞–π–¥–±–∞—Ä–∞
        side_layout.setSpacing(8)  # –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –õ–æ–≥–æ—Ç–∏–ø/–∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìß Mail System")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 20px; color: #6366F1;")
        side_layout.addWidget(title_label)
        
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
        self.list_widget = QListWidget()
        self.list_widget.setMinimumHeight(400)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–ø–∏—Å–∫–∞
        
        section_items = [
            ("üìä Dashboard", "section_dashboard"),
            ("üöÄ –†–∞—Å—Å—ã–ª–∫–∏", "section_campaigns"),
            ("üîó Webhook", "section_webhook_manager"),
            ("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "section_system_monitor"),
            ("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "section_config_manager"),
            ("üìù –®–∞–±–ª–æ–Ω—ã", "section_template_editor"),
            ("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "section_statistics"),
            ("üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏", "section_recipients"),
            ("üìÑ –õ–æ–≥–∏", "section_logs"),
            ("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "section_settings"),
        ]
        
        for display_name, key in section_items:
            item = QListWidgetItem(display_name)
            item.setData(Qt.UserRole, key)
            self.list_widget.addItem(item)
        
        self.list_widget.currentRowChanged.connect(self._on_section_changed)
        side_layout.addWidget(self.list_widget)
        
        side_layout.addStretch(1)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.stack = QStackedWidget()
        self.stack.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å—Ç–µ–∫–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        self._create_pages()
        
        layout.addWidget(sidebar)
        layout.addWidget(self.stack, 1)  # –†–∞—Å—à–∏—Ä—è–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        
        self.setCentralWidget(root)
        self.list_widget.setCurrentRow(0)
    
    def _create_pages(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
        
        # Dashboard
        dashboard_page = self._create_dashboard_page()
        self.stack.addWidget(dashboard_page)
        
        # Campaigns (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
        campaigns_page = self._create_campaigns_page()
        self.stack.addWidget(campaigns_page)
        
        # Webhook Manager
        webhook_page = WebhookManagerWidget(self.theme_manager)
        self.stack.addWidget(webhook_page)
        
        # System Monitor
        monitor_page = SystemMonitorWidget(self.theme_manager)
        self.stack.addWidget(monitor_page)
        
        # Config Manager
        config_page = ConfigManagerWidget(self.theme_manager)
        self.stack.addWidget(config_page)
        
        # Template Editor
        template_page = self._create_template_editor_page()
        self.stack.addWidget(template_page)
        
        # Statistics 
        stats_page = self._create_statistics_page()
        self.stack.addWidget(stats_page)
        
        # Recipients
        recipients_page = self._create_recipients_page()
        self.stack.addWidget(recipients_page)
        
        # Logs
        logs_page = self._create_logs_page()
        self.stack.addWidget(logs_page)
        
        # Settings
        settings_page = self._create_advanced_settings_page()
        self.stack.addWidget(settings_page)
    
    def _create_dashboard_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Dashboard"""
        page = QWidget()
        layout = QVBoxLayout(page)
        apply_margins(layout, 'page')
        apply_spacing(layout, 'lg')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä Dashboard")
        apply_heading_style(title, 'h1')
        title.setStyleSheet("color: #6366F1; padding-bottom: 8px; margin-bottom: 16px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä—è–¥—É
        cards_container = QWidget()
        cards_layout = QHBoxLayout(cards_container)
        cards_layout.setContentsMargins(0, 16, 0, 16)  # –û—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        cards_layout.setSpacing(20)
        
        self.dashboard_sent_card = StatsCard("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "0", 0.0, accent=QColor('#6366F1'), parent=None, theme_manager=self.theme_manager)
        self.dashboard_success_card = StatsCard("–£—Å–ø–µ—à–Ω–æ", "0%", 0.0, accent=QColor('#10B981'), parent=None, theme_manager=self.theme_manager)
        self.dashboard_failed_card = StatsCard("–û—à–∏–±–æ–∫", "0", 0.0, accent=QColor('#EF4444'), parent=None, theme_manager=self.theme_manager)
        self.dashboard_quota_card = StatsCard("–ö–≤–æ—Ç–∞", "0/100", 0.0, accent=QColor('#06B6D4'), parent=None, theme_manager=self.theme_manager)
        
        cards_layout.addWidget(self.dashboard_sent_card)
        cards_layout.addWidget(self.dashboard_success_card)
        cards_layout.addWidget(self.dashboard_failed_card)
        cards_layout.addWidget(self.dashboard_quota_card)
        
        layout.addWidget(cards_container)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        layout.addSpacing(24)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        actions_container = QWidget()
        actions_container_layout = QVBoxLayout(actions_container)
        actions_container_layout.setContentsMargins(8, 8, 8, 8)  # –£–º–µ–Ω—å—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        
        actions_group = QGroupBox("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∏–º—ã–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
        actions_group.setStyleSheet("""
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 8px;
                top: -2px;
                left: 10px;
                background-color: #2D3748;
                color: white;
                border-radius: 4px;
            }
        """)
        actions_layout = QHBoxLayout(actions_group)
        actions_layout.setContentsMargins(8, 8, 8, 8)  # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        actions_layout.setSpacing(12)
        
        quick_campaign_btn = ModernButton("üöÄ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", variant="primary", theme_manager=self.theme_manager)
        quick_campaign_btn.clicked.connect(lambda: self.list_widget.setCurrentRow(1))
        
        webhook_status_btn = ModernButton("üîó Webhook —Å—Ç–∞—Ç—É—Å", variant="secondary", theme_manager=self.theme_manager)
        webhook_status_btn.clicked.connect(lambda: self.list_widget.setCurrentRow(2))
        
        view_logs_btn = ModernButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", variant="tertiary", theme_manager=self.theme_manager)
        view_logs_btn.clicked.connect(lambda: self.list_widget.setCurrentRow(8))
        
        actions_layout.addWidget(quick_campaign_btn)
        actions_layout.addWidget(webhook_status_btn)
        actions_layout.addWidget(view_logs_btn)
        actions_layout.addStretch()
        
        actions_container_layout.addWidget(actions_group)
        layout.addWidget(actions_container)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        layout.addSpacing(24)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        activity_container = QWidget()
        activity_container_layout = QVBoxLayout(activity_container)
        activity_container_layout.setContentsMargins(8, 8, 8, 12)  # –£–º–µ–Ω—å—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_group = QGroupBox("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∏–º—ã–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
        activity_group.setStyleSheet("""
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 8px;
                top: -2px;
                left: 10px;
                background-color: #2D3748;
                color: white;
                border-radius: 4px;
            }
        """)
        activity_layout = QVBoxLayout(activity_group)
        activity_layout.setContentsMargins(8, 8, 8, 8)  # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        activity_layout.setSpacing(8)  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        self.activity_list = QTextEdit()
        self.activity_list.setReadOnly(True)
        self.activity_list.setMaximumHeight(150)
        self.activity_list.setLineWrapMode(QTextEdit.WidgetWidth)
        self.activity_list.setStyleSheet("""
            QTextEdit {
                padding: 12px;
                border: 1px solid #E5E7EB;
                border-radius: 6px;
                background-color: transparent;
                font-size: 13px;
                line-height: 1.5;
            }
        """)
        activity_layout.addWidget(self.activity_list)
        
        activity_container_layout.addWidget(activity_group)
        layout.addWidget(activity_container)
        layout.addStretch()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.dashboard_timer = QTimer()
        self.dashboard_timer.timeout.connect(self._update_dashboard)
        self.dashboard_timer.start(10000)
        self._update_dashboard()
        
        return page
    
    def _create_campaigns_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—Å—ã–ª–æ–∫ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        page = QWidget()
        main_layout = QVBoxLayout(page)
        apply_margins(main_layout, 'section')
        apply_spacing(main_layout, 'md')
        
        title = QLabel("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏")
        apply_heading_style(title, 'h1')
        title.setStyleSheet("color: #6366F1; padding-bottom: 8px; margin-bottom: 16px;")
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)
        
        # –°–æ–∑–¥–∞–µ–º scroll area –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        content_widget = QWidget()
        layout = QVBoxLayout(content_widget)
        layout.setContentsMargins(32, 32, 32, 32)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(24)
        
        # –§–æ—Ä–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—É–±–∏—Ä–∞–µ–º GroupBox, —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        form_layout = QVBoxLayout()
        form_layout.setSpacing(20)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
        # –§–∞–π–ª –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        rec_container = QWidget()
        rec_layout = QHBoxLayout(rec_container)
        rec_layout.setContentsMargins(0, 8, 0, 8)
        rec_layout.setSpacing(12)
        rec_layout.setAlignment(Qt.AlignVCenter)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É
        
        self.recipients_path = FloatingTextField("–§–∞–π–ª –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "", "recipients.csv", parent=None, theme_manager=self.theme_manager)
        btn_choose_rec = ModernButton("–í—ã–±—Ä–∞—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        btn_choose_rec.clicked.connect(lambda: self._choose_file_ft(self.recipients_path, "CSV/XLSX/JSON (*.csv *.xlsx *.json)"))
        
        rec_layout.addWidget(self.recipients_path, 1)
        rec_layout.addWidget(btn_choose_rec)
        form_layout.addWidget(rec_container)
        
        # –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞
        tpl_container = QWidget()
        tpl_layout = QHBoxLayout(tpl_container)
        tpl_layout.setContentsMargins(0, 8, 0, 8)
        tpl_layout.setSpacing(12)
        tpl_layout.setAlignment(Qt.AlignVCenter)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É
        
        self.template_path = FloatingTextField("–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞", "", "template.html.j2", parent=None, theme_manager=self.theme_manager)
        btn_choose_tpl = ModernButton("–í—ã–±—Ä–∞—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        btn_choose_tpl.clicked.connect(lambda: self._choose_file_ft(self.template_path, "Templates (*.j2 *.html *.txt)"))
        
        tpl_layout.addWidget(self.template_path, 1)
        tpl_layout.addWidget(btn_choose_tpl)
        form_layout.addWidget(tpl_container)
        
        # –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        subject_container = QWidget()
        subject_layout = QVBoxLayout(subject_container)
        subject_layout.setContentsMargins(0, 8, 0, 8)
        
        self.subject_edit = FloatingTextField("–¢–µ–º–∞ –ø–∏—Å—å–º–∞", parent=None, theme_manager=self.theme_manager)
        subject_layout.addWidget(self.subject_edit)
        form_layout.addWidget(subject_container)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
        settings_container = QWidget()
        settings_layout = QHBoxLayout(settings_container)
        settings_layout.setContentsMargins(0, 24, 0, 24)  # –û—Ç—Å—Ç—É–ø—ã
        settings_layout.setSpacing(24)  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω
        parallel_group = QWidget()
        parallel_group.setMinimumWidth(200)
        parallel_group.setMaximumHeight(80)  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É
        parallel_layout = QHBoxLayout(parallel_group)  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        parallel_layout.setContentsMargins(16, 16, 16, 16)
        parallel_layout.setSpacing(12)
        parallel_layout.setAlignment(Qt.AlignVCenter)
        
        parallel_label = QLabel("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å:")
        parallel_label.setStyleSheet("font-weight: bold; color: white; font-size: 14px;")
        parallel_label.setAlignment(Qt.AlignVCenter)
        parallel_layout.addWidget(parallel_label)
        
        self.concurrent_spin = QSpinBox()
        self.concurrent_spin.setRange(1, 100)
        self.concurrent_spin.setValue(10)
        self.concurrent_spin.setAlignment(Qt.AlignCenter)
        self.concurrent_spin.setMinimumHeight(32)  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É
        self.concurrent_spin.setMaximumWidth(80)   # –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —à–∏—Ä–∏–Ω—É
        self.concurrent_spin.setStyleSheet("""
            QSpinBox {
                border: 1px solid #4A5568;
                border-radius: 6px;
                padding: 6px 10px;
                font-size: 13px;
                font-weight: bold;
                background-color: transparent;
                color: white;
                min-width: 60px;
            }
            QSpinBox:focus {
                border-color: #6366F1;
                outline: none;
            }
            QSpinBox:hover {
                border-color: #718096;
                background-color: rgba(55, 65, 81, 0.3);
            }
            QSpinBox::up-button, QSpinBox::down-button {
                border: 1px solid #4A5568;
                width: 18px;
                border-radius: 3px;
                margin: 1px;
                background-color: rgba(74, 85, 104, 0.8);
            }
            QSpinBox::up-button:hover, QSpinBox::down-button:hover {
                background-color: #6366F1;
                border-color: #6366F1;
            }
            QSpinBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 7px solid white;
                width: 0;
                height: 0;
                margin: 2px;
            }
        """)
        parallel_layout.addWidget(self.concurrent_spin)
        
        # –§–æ–Ω –∫–∞–∫ —É –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –±–µ–∑ –æ–±–≤–æ–¥–∫–∏
        parallel_group.setStyleSheet("""
            QWidget {
                border: none;
                border-radius: 0px;
                background-color: transparent;
            }
        """)
        settings_layout.addWidget(parallel_group)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω
        test_group = QWidget()
        test_group.setMinimumWidth(200)
        test_group.setMaximumHeight(80)  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É
        test_layout = QHBoxLayout(test_group)  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        test_layout.setContentsMargins(16, 16, 16, 16)
        test_layout.setSpacing(12)
        test_layout.setAlignment(Qt.AlignVCenter)
        
        test_label = QLabel("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:")
        test_label.setStyleSheet("font-weight: bold; color: white; font-size: 14px;")
        test_label.setAlignment(Qt.AlignVCenter)
        test_layout.addWidget(test_label)
        
        self.dry_run_switch = IOSSwitch(False, theme_manager=self.theme_manager)
        test_layout.addWidget(self.dry_run_switch, 0, Qt.AlignVCenter)
        
        # –§–æ–Ω –∫–∞–∫ —É –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –±–µ–∑ –æ–±–≤–æ–¥–∫–∏
        test_group.setStyleSheet("""
            QWidget {
                border: none;
                border-radius: 0px;
                background-color: transparent;
            }
        """)
        settings_layout.addWidget(test_group)
        
        settings_layout.addStretch()
        form_layout.addWidget(settings_container)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.start_btn = ModernButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", variant="primary", theme_manager=self.theme_manager)
        self.start_btn.clicked.connect(self._start_campaign)
        
        self.cancel_btn = ModernButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        self.cancel_btn.setEnabled(False)
        self.cancel_btn.clicked.connect(self._cancel_campaign)
        
        buttons_layout.addWidget(self.start_btn)
        buttons_layout.addWidget(self.cancel_btn)
        buttons_layout.addStretch()
        
        form_layout.addLayout(buttons_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_layout = QHBoxLayout()
        
        self.progress_ring = ProgressRing(size=36, thickness=4, theme_manager=self.theme_manager)
        self.progress_ring.setVisible(False)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        
        self.progress_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        
        progress_layout.addWidget(self.progress_ring)
        progress_layout.addWidget(self.progress_bar, 1)
        progress_layout.addWidget(self.progress_label)
        
        form_layout.addLayout(progress_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addLayout(form_layout)
        layout.addStretch()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ scroll area
        scroll.setWidget(content_widget)
        main_layout.addWidget(scroll)
        
        return page
    
    def _create_template_editor_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        page = QWidget()
        layout = QVBoxLayout(page)
        apply_margins(layout, 'page')
        apply_spacing(layout, 'lg')
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–∏–∂–∞—Ç –∫ –≤–µ—Ä—Ö—É)
        title = QLabel("üìù –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤")
        apply_heading_style(title, 'h1')
        title.setStyleSheet("color: #6366F1; margin: 0 0 20px 0; padding: 0;")
        layout.addWidget(title, 0, Qt.AlignTop)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        left_layout.setContentsMargins(0, 0, 0, 0)
        left_layout.setSpacing(12)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        new_template_btn = ModernButton("+ –ù–æ–≤—ã–π", variant="primary", theme_manager=self.theme_manager)
        delete_template_btn = ModernButton("–£–¥–∞–ª–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        buttons_layout.addWidget(new_template_btn)
        buttons_layout.addWidget(delete_template_btn)
        left_layout.addLayout(buttons_layout)
        
        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        self.templates_list = QListWidget()
        self.templates_list.setStyleSheet("""
            QListWidget {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 8px;
                color: white;
                padding: 8px;
            }
            QListWidget::item {
                padding: 8px;
                border-radius: 4px;
                margin: 2px;
            }
            QListWidget::item:selected {
                background-color: #6366F1;
            }
            QListWidget::item:hover {
                background-color: #374151;
            }
        """)
        left_layout.addWidget(self.templates_list)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        right_layout.setContentsMargins(0, 0, 0, 0)
        right_layout.setSpacing(12)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        name_layout = QHBoxLayout()
        name_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"))
        self.template_name_edit = QLineEdit()
        self.template_name_edit.setStyleSheet("""
            QLineEdit {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 6px;
                color: white;
                padding: 8px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border-color: #6366F1;
            }
        """)
        name_layout.addWidget(self.template_name_edit)
        right_layout.addLayout(name_layout)
        
        # –ü–æ–ª–µ –¥–ª—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞
        subject_layout = QHBoxLayout()
        subject_layout.addWidget(QLabel("–¢–µ–º–∞ –ø–∏—Å—å–º–∞:"))
        self.template_subject_edit = QLineEdit()
        self.template_subject_edit.setStyleSheet(self.template_name_edit.styleSheet())
        subject_layout.addWidget(self.template_subject_edit)
        right_layout.addLayout(subject_layout)
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_label = QLabel("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞):")
        content_label.setStyleSheet("font-weight: bold; margin-top: 16px;")
        right_layout.addWidget(content_label)

        self.template_content_edit = QTextEdit()
        self.template_content_edit.setStyleSheet("""
            QTextEdit {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 6px;
                color: white;
                padding: 12px;
                font-family: 'Monaco', 'Menlo', monospace;
                font-size: 13px;
                line-height: 1.4;
            }
            QTextEdit:focus {
                border-color: #6366F1;
            }
        """)
        self.template_content_edit.setPlainText("""–ü—Ä–∏–≤–µ—Ç, {{name}}!

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø–∏—Å—å–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏:
  ‚Ä¢ {{name}} ‚Äî –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  ‚Ä¢ {{email}} ‚Äî email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  ‚Ä¢ {{subject}} ‚Äî —Ç–µ–º–∞ –ø–∏—Å—å–º–∞
  ‚Ä¢ {{date}} ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞

–ù–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ HTML.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏""")
        right_layout.addWidget(self.template_content_edit)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É HTML / Jinja
        self._template_highlighter = HtmlHighlighter(self.template_content_edit.document())
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–º
        template_buttons_layout = QHBoxLayout()
        save_template_btn = ModernButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", variant="primary", theme_manager=self.theme_manager)
        preview_template_btn = ModernButton("üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", variant="secondary", theme_manager=self.theme_manager)
        template_buttons_layout.addWidget(save_template_btn)
        template_buttons_layout.addWidget(preview_template_btn)
        template_buttons_layout.addStretch()
        right_layout.addLayout(template_buttons_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ splitter
        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 2)
        splitter.setSizes([320, 780])
        layout.addWidget(splitter, 1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        new_template_btn.clicked.connect(self._create_new_template)
        delete_template_btn.clicked.connect(self._delete_template)
        save_template_btn.clicked.connect(self._save_template)
        preview_template_btn.clicked.connect(self._preview_template)
        self.templates_list.itemSelectionChanged.connect(self._load_template)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        self._load_templates()
        return page
    
    def _create_new_template(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        self.template_name_edit.setText("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
        self.template_subject_edit.setText("–¢–µ–º–∞ –ø–∏—Å—å–º–∞")
        self.template_content_edit.setPlainText("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞...")
    
    def _delete_template(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        current_item = self.templates_list.currentItem()
        if current_item:
            reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                       f"–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{current_item.text()}'?",
                                       QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞/–±–∞–∑—ã
                self.templates_list.takeItem(self.templates_list.row(current_item))
    
    def _save_template(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        name = self.template_name_edit.text().strip()
        if not name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞!")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª/–±–∞–∑—É
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        items = [self.templates_list.item(i).text() for i in range(self.templates_list.count())]
        if name not in items:
            self.templates_list.addItem(name)
        
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–®–∞–±–ª–æ–Ω '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    def _preview_template(self):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞"""
        content = self.template_content_edit.toPlainText()
        subject = self.template_subject_edit.text()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        preview_content = content.replace("{{name}}", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
        preview_content = preview_content.replace("{{email}}", "ivan@example.com") 
        preview_content = preview_content.replace("{{subject}}", subject)
        preview_content = preview_content.replace("{{date}}", "23 —Å–µ–Ω—Ç—è–±—Ä—è 2025")
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        dialog = QDialog(self)
        dialog.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞")
        dialog.setMinimumSize(600, 500)
        
        layout = QVBoxLayout(dialog)
        
        preview_label = QLabel("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:")
        preview_label.setStyleSheet("font-weight: bold; margin-bottom: 10px;")
        layout.addWidget(preview_label)
        
        preview_text = QTextEdit()
        preview_text.setHtml(preview_content)
        preview_text.setReadOnly(True)
        layout.addWidget(preview_text)
        
        close_btn = ModernButton("–ó–∞–∫—Ä—ã—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        close_btn.clicked.connect(dialog.accept)
        layout.addWidget(close_btn)
        
        dialog.exec_()
    
    def _load_template(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        current_item = self.templates_list.currentItem()
        if current_item:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞/–±–∞–∑—ã
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            template_name = current_item.text()
            self.template_name_edit.setText(template_name)
            self.template_subject_edit.setText(f"–¢–µ–º–∞ –¥–ª—è {template_name}")
    
    def _load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞/–±–∞–∑—ã
        # –ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        example_templates = [
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ",
            "–ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏", 
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
        ]
        for template in example_templates:
            self.templates_list.addItem(template)
    
    def _create_statistics_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        page = QWidget()
        layout = QVBoxLayout(page)
        apply_margins(layout, 'page')
        apply_spacing(layout, 'lg')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        apply_heading_style(title, 'h1')
        title.setStyleSheet("color: #6366F1; padding-bottom: 8px; margin-bottom: 16px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
        filters_layout = QHBoxLayout()
        filters_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥:"))
        
        self.stats_period_combo = QComboBox()
        self.stats_period_combo.addItems(["–°–µ–≥–æ–¥–Ω—è", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ 3 –º–µ—Å—è—Ü–∞", "–ó–∞ –≥–æ–¥", "–í—Å–µ –≤—Ä–µ–º—è"])
        self.stats_period_combo.setCurrentText("–ó–∞ –º–µ—Å—è—Ü")
        self.stats_period_combo.setStyleSheet("""
            QComboBox {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 6px;
                color: white;
                padding: 8px;
                min-width: 120px;
            }
            QComboBox:focus {
                border-color: #6366F1;
            }
            QComboBox::drop-down {
                border: none;
            }
        """)
        filters_layout.addWidget(self.stats_period_combo)
        
        refresh_btn = ModernButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        filters_layout.addWidget(refresh_btn)
        filters_layout.addStretch()
        
        layout.addLayout(filters_layout)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        metrics_layout = QHBoxLayout()
        metrics_layout.setSpacing(16)
        
        self.total_campaigns_card = StatsCard("–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", "15", 12.5, accent=QColor('#8B5CF6'), parent=None, theme_manager=self.theme_manager)
        self.total_emails_card = StatsCard("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º", "1,234", 8.3, accent=QColor('#06B6D4'), parent=None, theme_manager=self.theme_manager)
        self.avg_open_rate_card = StatsCard("–°—Ä–µ–¥–Ω–∏–π Open Rate", "24.7%", 2.1, accent=QColor('#10B981'), parent=None, theme_manager=self.theme_manager)
        self.avg_click_rate_card = StatsCard("–°—Ä–µ–¥–Ω–∏–π CTR", "3.2%", -0.8, accent=QColor('#F59E0B'), parent=None, theme_manager=self.theme_manager)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for card in [self.total_campaigns_card, self.total_emails_card, self.avg_open_rate_card, self.avg_click_rate_card]:
            card.setMinimumHeight(110)
            card.setMaximumHeight(120)
            metrics_layout.addWidget(card)
        
        layout.addLayout(metrics_layout)
        
        # –û–±–ª–∞—Å—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
        content_splitter = QSplitter(Qt.Vertical)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –≥—Ä–∞—Ñ–∏–∫–∏
        charts_widget = QWidget()
        charts_layout = QHBoxLayout(charts_widget)
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
        time_chart_group = QGroupBox("–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫")
        time_chart_layout = QVBoxLayout(time_chart_group)
        time_chart_layout.setContentsMargins(0,0,0,0)
        time_chart_layout.setSpacing(0)
        
        self.time_chart_area = QTextEdit()
        self.time_chart_area.setMaximumHeight(9999)
        self.time_chart_area.setStyleSheet("""
            QTextEdit {
                background-color: #1A202C;
                border: 1px solid #4A5568;
                border-radius: 8px;
                color: #10B981;
                font-family: monospace;
                padding: 12px;
            }
        """)
        self.time_chart_area.setPlainText("""üìà –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:

–ü–Ω  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 156 –ø–∏—Å–µ–º
–í—Ç  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 234 –ø–∏—Å–µ–º  
–°—Ä  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 89 –ø–∏—Å–µ–º
–ß—Ç  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 198 –ø–∏—Å–µ–º
–ü—Ç  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 287 –ø–∏—Å–µ–º
–°–±  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 45 –ø–∏—Å–µ–º
–í—Å  ‚ñà‚ñà‚ñà‚ñà 23 –ø–∏—Å–µ–º

üìä –í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: 1,032 –ø–∏—Å–µ–º
üìà –†–æ—Å—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º: +12.3%""")
        self.time_chart_area.setReadOnly(True)
        time_chart_layout.addWidget(self.time_chart_area)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        status_chart_group = QGroupBox("–°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
        status_chart_layout = QVBoxLayout(status_chart_group)
        status_chart_layout.setContentsMargins(0,0,0,0)
        status_chart_layout.setSpacing(0)
        
        self.status_chart_area = QTextEdit()
        self.status_chart_area.setMaximumHeight(9999)
        self.status_chart_area.setStyleSheet(self.time_chart_area.styleSheet().replace("#10B981", "#6366F1"))
        self.status_chart_area.setPlainText("""üîµ –°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏:

‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:     847 (82.1%)
‚ùå –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:        123 (11.9%) 
‚è≥ –í –æ—á–µ—Ä–µ–¥–∏:              45 (4.4%)
üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:      17 (1.6%)

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å: 45%
‚Ä¢ –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞: 28%
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–º: 19%  
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 8%""")
        self.status_chart_area.setReadOnly(True)
        status_chart_layout.addWidget(self.status_chart_area)
        
        charts_layout.addWidget(time_chart_group)
        charts_layout.addWidget(status_chart_group)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–º–ø–∞–Ω–∏–π
        campaigns_table_group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è –∫–∞–º–ø–∞–Ω–∏–π")
        campaigns_table_layout = QVBoxLayout(campaigns_table_group)
        campaigns_table_layout.setContentsMargins(0,0,0,0)
        campaigns_table_layout.setSpacing(0)
        
        self.campaigns_table = QTableWidget()
        self.campaigns_table.setColumnCount(6)
        self.campaigns_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "–£—Å–ø–µ—à–Ω–æ", "–û—à–∏–±–æ–∫"
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        sample_campaigns = [
            ("–õ–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è", "2025-09-20", "500", "500", "467", "33"),
            ("–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞", "2025-09-18", "1200", "1200", "1156", "44"),
            ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ", "2025-09-15", "300", "298", "289", "9"),
            ("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "2025-09-12", "800", "800", "724", "76"),
            ("–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "2025-09-01", "2000", "1987", "1834", "153")
        ]
        
        self.campaigns_table.setRowCount(len(sample_campaigns))
        for row, campaign in enumerate(sample_campaigns):
            for col, value in enumerate(campaign):
                item = QTableWidgetItem(str(value))
                self.campaigns_table.setItem(row, col, item)
        
        self.campaigns_table.setStyleSheet("""
            QTableWidget {background-color:#2D3748;border:1px solid #4A5568;border-radius:8px;color:white;gridline-color:#4A5568;}
            QTableWidget::item {padding:8px;border-bottom:1px solid #4A5568;}
            QTableWidget::item:selected {background-color:#6366F1;}
            QHeaderView::section {background-color:#374151;color:white;padding:10px;border:none;font-weight:bold;}
            QTableCornerButton::section {background-color:#2D3748;border:1px solid #4A5568;}
        """)
        self.campaigns_table.verticalHeader().setVisible(False)
        # –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ä–∞–º–∫–∏ –≥—Ä—É–ø–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        common_group_style = (
            "QGroupBox { border: none; margin-top:0px; padding:0px;} "
            "QGroupBox::title {left:4px; top:-2px; padding:0 6px; color:#A0AEC0; background: transparent; font-weight:600;}"
        )
        campaigns_table_group.setStyleSheet(common_group_style)
        time_chart_group.setStyleSheet(common_group_style)
        status_chart_group.setStyleSheet(common_group_style)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –≤–µ—Å—å –±–ª–æ–∫
        header = self.campaigns_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –î–∞—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # –£—Å–ø–µ—à–Ω–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # –û—à–∏–±–æ–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        self.campaigns_table.setColumnWidth(0, 200)  # –ù–∞–∑–≤–∞–Ω–∏–µ - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        self.campaigns_table.setColumnWidth(1, 120)  # –î–∞—Ç–∞
        self.campaigns_table.setColumnWidth(2, 100)  # –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        self.campaigns_table.setColumnWidth(3, 100)  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.campaigns_table.setColumnWidth(4, 100)  # –£—Å–ø–µ—à–Ω–æ
        self.campaigns_table.setColumnWidth(5, 80)   # –û—à–∏–±–æ–∫
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        self.campaigns_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.campaigns_table.horizontalHeader().setMinimumSectionSize(80)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–û—à–∏–±–æ–∫)
        self.campaigns_table.setItemDelegateForColumn(5, ErrorDotDelegate(self.campaigns_table))
        campaigns_table_layout.addWidget(self.campaigns_table, 1)
        campaigns_table_layout.setStretchFactor(self.campaigns_table, 1)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_layout = QHBoxLayout()
        export_csv_btn = ModernButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", variant="secondary", theme_manager=self.theme_manager)
        export_pdf_btn = ModernButton("üìë –≠–∫—Å–ø–æ—Ä—Ç PDF", variant="secondary", theme_manager=self.theme_manager)
        export_layout.addWidget(export_csv_btn)
        export_layout.addWidget(export_pdf_btn)
        export_layout.addStretch()
        campaigns_table_layout.addLayout(export_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ splitter
        content_splitter.addWidget(charts_widget)
        content_splitter.addWidget(campaigns_table_group)
        content_splitter.setSizes([320, 480])  # –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –Ω–∏–∂–Ω–µ–º—É –±–ª–æ–∫—É
        
        layout.addWidget(content_splitter)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        refresh_btn.clicked.connect(self._refresh_statistics)
        self.stats_period_combo.currentTextChanged.connect(self._update_statistics_period)
        export_csv_btn.clicked.connect(self._export_statistics_csv)
        export_pdf_btn.clicked.connect(self._export_statistics_pdf)
        
        return page
    
    def _refresh_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

        QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    def _update_statistics_period(self, period):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        pass
    
    def _export_statistics_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "statistics.csv", "CSV Files (*.csv)"
        )
        if file_path:
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}")
    
    def _export_statistics_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ PDF"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", "statistics_report.pdf", "PDF Files (*.pdf)"
        )
        if file_path:
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
    
    def _create_recipients_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏"""
        page = QWidget()
        layout = QVBoxLayout(page)
        apply_margins(layout, 'page')
        apply_spacing(layout, 'lg')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏")
        apply_heading_style(title, 'h1')
        title.setStyleSheet("color: #6366F1; padding-bottom: 8px; margin-bottom: 16px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = QHBoxLayout()
        
        import_btn = ModernButton("üì• –ò–º–ø–æ—Ä—Ç CSV", variant="primary", theme_manager=self.theme_manager)
        export_btn = ModernButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", variant="secondary", theme_manager=self.theme_manager)
        add_recipient_btn = ModernButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", variant="primary", theme_manager=self.theme_manager)
        delete_recipient_btn = ModernButton("üóë –£–¥–∞–ª–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        
        controls_layout.addWidget(import_btn)
        controls_layout.addWidget(export_btn)
        controls_layout.addWidget(add_recipient_btn)
        controls_layout.addWidget(delete_recipient_btn)
        controls_layout.addStretch()
        
        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        self.recipients_search = QLineEdit()
        self.recipients_search.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –∏–º—è...")
        self.recipients_search.setStyleSheet("""
            QLineEdit {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 6px;
                color: white;
                padding: 8px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border-color: #6366F1;
            }
        """)
        search_layout.addWidget(self.recipients_search)
        
        controls_layout.addLayout(search_layout)
        layout.addLayout(controls_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        self.recipients_table = QTableWidget()
        self.recipients_table.setColumnCount(5)
        self.recipients_table.setHorizontalHeaderLabels([
            "Email", "–ò–º—è", "–ì—Ä—É–ø–ø–∞", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        ])
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        sample_recipients = [
            ("john.doe@example.com", "John Doe", "VIP –∫–ª–∏–µ–Ω—Ç—ã", "–ê–∫—Ç–∏–≤–µ–Ω", "2025-09-01"),
            ("jane.smith@example.com", "Jane Smith", "–ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "–ê–∫—Ç–∏–≤–µ–Ω", "2025-09-05"),
            ("bob.wilson@example.com", "Bob Wilson", "–ê–∫—Ü–∏–∏", "–û—Ç–ø–∏—Å–∞–ª—Å—è", "2025-08-20"),
            ("alice.brown@example.com", "Alice Brown", "VIP –∫–ª–∏–µ–Ω—Ç—ã", "–ê–∫—Ç–∏–≤–µ–Ω", "2025-09-10"),
            ("charlie.davis@example.com", "Charlie Davis", "–ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "2025-08-15")
        ]
        
        self.recipients_table.setRowCount(len(sample_recipients))
        for row, recipient in enumerate(sample_recipients):
            for col, value in enumerate(recipient):
                item = QTableWidgetItem(str(value))
                # –ü–æ–¥–∫—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
                if col == 3:  # –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    if value == "–û—Ç–ø–∏—Å–∞–ª—Å—è":
                        item.setBackground(QColor('#FEE2E2'))  # –ö—Ä–∞—Å–Ω—ã–π
                    elif value == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω":
                        item.setBackground(QColor('#FEF3C7'))  # –ñ–µ–ª—Ç—ã–π  
                    elif value == "–ê–∫—Ç–∏–≤–µ–Ω":
                        item.setBackground(QColor('#D1FAE5'))  # –ó–µ–ª–µ–Ω—ã–π
                self.recipients_table.setItem(row, col, item)
        
        self.recipients_table.setStyleSheet("""
            QTableWidget {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-radius: 8px;
                color: white;
                gridline-color: #4A5568;
                alternate-background-color: #374151;
                selection-background-color: #6366F1;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #4A5568;
                border-right: 1px solid #4A5568;
            }
            QTableWidget::item:selected {
                background-color: #6366F1;
                color: white;
            }
            QTableWidget::item:hover {
                background-color: #4A5568;
            }
            QHeaderView::section {
                background-color: #374151;
                color: white;
                padding: 12px;
                border: none;
                border-right: 1px solid #4A5568;
                font-weight: bold;
                text-align: left;
            }
            QHeaderView::section:hover {
                background-color: #4A5568;
            }
            QTableWidget QHeaderView::section:vertical {
                background-color: #2D3748; /* —Ñ–æ–Ω —Å–µ–∫—Ü–∏–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ */
                border: none;
                border-right: 1px solid #4A5568;
                padding: 2px 6px; /* —á—É—Ç—å –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–æ —É–∂–∞—Ç–æ */
                color: #A0AEC0;
            }
            /* –§–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º (–ø—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ header) */
            QTableWidget QHeaderView:vertical {
                background-color: #2D3748;
                border: none;
            }
            QTableWidget::item:first-column {
                background-color: #2D3748;
            }
            QScrollBar:vertical {
                background-color: #374151;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #6366F1;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #7C3AED;
            }
            QTableCornerButton::section {
                background-color: #2D3748;
                border: 1px solid #4A5568;
                border-top-left-radius: 8px;
            }
        """)
        # –ü–∞–ª–∏—Ç—Ä–∞ base —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ç—ë–º–Ω—ã–µ –ø—É—Å—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–¥–µ–Ω—Ç–∞—Ü–∏—è)
        pal = self.recipients_table.palette()
        pal.setColor(QPalette.Base, QColor('#2D3748'))
        pal.setColor(QPalette.AlternateBase, QColor('#374151'))
        self.recipients_table.setPalette(pal)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –≤–µ—Å—å –±–ª–æ–∫
        header = self.recipients_table.horizontalHeader()
        
        # –£–±–∏—Ä–∞–µ–º setStretchLastSection –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ setSectionResizeMode –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        header.setStretchLastSection(False)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # Email - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∞—è—Å—è –∫–æ–ª–æ–Ω–∫–∞
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –ò–º—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(2, QHeaderView.Stretch)  # –ì—Ä—É–ø–ø–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∞—è—Å—è
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –°—Ç–∞—Ç—É—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # –î–∞—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.recipients_table.setColumnWidth(0, 280)  # Email - —É–≤–µ–ª–∏—á–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞
        self.recipients_table.setColumnWidth(1, 140)  # –ò–º—è - –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∞
        self.recipients_table.setColumnWidth(2, 200)  # –ì—Ä—É–ø–ø–∞ - —É–≤–µ–ª–∏—á–µ–Ω–∞ (–±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è)
        self.recipients_table.setColumnWidth(3, 110)  # –°—Ç–∞—Ç—É—Å - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        self.recipients_table.setColumnWidth(4, 120)  # –î–∞—Ç–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        
        layout.addWidget(self.recipients_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        stats_layout = QHBoxLayout()
        total_label = QLabel("–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: 1,234 | –ê–∫—Ç–∏–≤–Ω—ã—Ö: 1,156 | –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: 45 | –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: 33")
        total_label.setStyleSheet("color: #A0AEC0; font-size: 14px; padding: 8px;")
        stats_layout.addWidget(total_label)
        stats_layout.addStretch()
        layout.addLayout(stats_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        import_btn.clicked.connect(self._import_recipients)
        export_btn.clicked.connect(self._export_recipients)
        add_recipient_btn.clicked.connect(self._add_recipient)
        delete_recipient_btn.clicked.connect(self._delete_recipient)
        self.recipients_search.textChanged.connect(self._search_recipients)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        self.recipients_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.recipients_table.horizontalHeader().setMinimumSectionSize(80)  # –£–º–µ–Ω—å—à–µ–Ω –º–∏–Ω–∏–º—É–º
        self.recipients_table.horizontalHeader().setDefaultSectionSize(150)  # –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –í–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.recipients_table.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.recipients_table.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        self.recipients_table.setMinimumHeight(300)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        self.recipients_table.setAlternatingRowColors(True)  # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        return page
    
    def _import_recipients(self):
        """–ò–º–ø–æ—Ä—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ CSV"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", "", "CSV Files (*.csv)"
        )
        if file_path:
            QMessageBox.information(self, "–ò–º–ø–æ—Ä—Ç", f"–ò–º–ø–æ—Ä—Ç –∏–∑ {file_path} –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    def _export_recipients(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ CSV"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "recipients.csv", "CSV Files (*.csv)"
        )
        if file_path:
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
    
    def _add_recipient(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        dialog.setMinimumWidth(400)
        
        layout = QFormLayout(dialog)
        
        email_edit = QLineEdit()
        name_edit = QLineEdit()
        group_combo = QComboBox()
        group_combo.addItems(["VIP –∫–ª–∏–µ–Ω—Ç—ã", "–ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "–ê–∫—Ü–∏–∏", "–ü–∞—Ä—Ç–Ω–µ—Ä—ã"])
        
        layout.addRow("Email:", email_edit)
        layout.addRow("–ò–º—è:", name_edit)
        layout.addRow("–ì—Ä—É–ø–ø–∞:", group_combo)
        
        buttons_layout = QHBoxLayout()
        save_btn = ModernButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", variant="primary", theme_manager=self.theme_manager)
        cancel_btn = ModernButton("–û—Ç–º–µ–Ω–∞", variant="secondary", theme_manager=self.theme_manager)
        
        save_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)
        
        buttons_layout.addWidget(save_btn)
        buttons_layout.addWidget(cancel_btn)
        layout.addRow(buttons_layout)
        
        if dialog.exec_() == QDialog.Accepted:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É/—Ñ–∞–π–ª
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    def _delete_recipient(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        current_row = self.recipients_table.currentRow()
        if current_row >= 0:
            email = self.recipients_table.item(current_row, 0).text()
            reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                       f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è {email}?",
                                       QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.recipients_table.removeRow(current_row)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
    
    def _search_recipients(self, text):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        for row in range(self.recipients_table.rowCount()):
            match = False
            for col in range(self.recipients_table.columnCount()):
                item = self.recipients_table.item(row, col)
                if item and text.lower() in item.text().lower():
                    match = True
                    break
            self.recipients_table.setRowHidden(row, not match)
    
    def _create_advanced_settings_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        page = QWidget()
        layout = QVBoxLayout(page)
        apply_margins(layout, 'page')
        apply_spacing(layout, 'lg')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        apply_heading_style(title, 'h1')
        title.setStyleSheet("color: #6366F1; padding-bottom: 8px; margin-bottom: 16px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Scroll area –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("QScrollArea { border: none; }")
        
        settings_widget = QWidget()
        settings_layout = QVBoxLayout(settings_widget)
        settings_layout.setSpacing(20)
        
        # –ì—Ä—É–ø–ø–∞: –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
        appearance_group = QGroupBox("üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥")
        appearance_layout = QGridLayout(appearance_group)
        
        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        appearance_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:"), 0, 0)
        font_size_spin = QSpinBox()
        font_size_spin.setRange(10, 20)
        font_size_spin.setValue(14)
        font_size_spin.setSuffix(" px")
        appearance_layout.addWidget(font_size_spin, 0, 1)
        
        settings_layout.addWidget(appearance_group)
        
        # –ì—Ä—É–ø–ø–∞: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications_group = QGroupBox("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notifications_layout = QGridLayout(notifications_group)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications_layout.addWidget(QLabel("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"), 0, 0)
        system_notifications_check = SquareCheckBox("–í–∫–ª—é—á–∏—Ç—å")
        system_notifications_check.setChecked(True)
        notifications_layout.addWidget(system_notifications_check, 0, 1)
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications_layout.addWidget(QLabel("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"), 1, 0)
        email_notifications_check = SquareCheckBox("–í–∫–ª—é—á–∏—Ç—å")
        email_notifications_check.setChecked(False)
        notifications_layout.addWidget(email_notifications_check, 1, 1)
        
        # Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_layout.addWidget(QLabel("Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"), 2, 0)
        notification_email_edit = QLineEdit()
        notification_email_edit.setPlaceholderText("admin@example.com")
        notifications_layout.addWidget(notification_email_edit, 2, 1)
        
        settings_layout.addWidget(notifications_group)
        
        # –ì—Ä—É–ø–ø–∞: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_group = QGroupBox("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        schedule_layout = QGridLayout(schedule_group)
        
        # –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_layout.addWidget(QLabel("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:"), 0, 0)
        auto_send_check = SquareCheckBox("–í–∫–ª—é—á–∏—Ç—å")
        schedule_layout.addWidget(auto_send_check, 0, 1)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        schedule_layout.addWidget(QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:"), 1, 0)
        check_interval_spin = QSpinBox()
        check_interval_spin.setRange(1, 60)
        check_interval_spin.setValue(5)
        check_interval_spin.setSuffix(" –º–∏–Ω")
        schedule_layout.addWidget(check_interval_spin, 1, 1)
        
        # –ú–∞–∫—Å–∏–º—É–º —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —á–∞—Å
        schedule_layout.addWidget(QLabel("–ú–∞–∫—Å–∏–º—É–º —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —á–∞—Å:"), 2, 0)
        max_per_hour_spin = QSpinBox()
        max_per_hour_spin.setRange(1, 1000)
        max_per_hour_spin.setValue(100)
        schedule_layout.addWidget(max_per_hour_spin, 2, 1)
        
        settings_layout.addWidget(schedule_group)
        
        # –ì—Ä—É–ø–ø–∞: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security_group = QGroupBox("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        security_layout = QGridLayout(security_group)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        security_layout.addWidget(QLabel("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:"), 0, 0)
        detailed_logging_check = SquareCheckBox("–í–∫–ª—é—á–∏—Ç—å")
        detailed_logging_check.setChecked(True)
        security_layout.addWidget(detailed_logging_check, 0, 1)
        
        # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ (–¥–Ω–∏)
        security_layout.addWidget(QLabel("–•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏:"), 1, 0)
        log_retention_spin = QSpinBox()
        log_retention_spin.setRange(1, 365)
        log_retention_spin.setValue(30)
        log_retention_spin.setSuffix(" –¥–Ω–µ–π")
        security_layout.addWidget(log_retention_spin, 1, 1)
        
        # API –∫–ª—é—á –∑–∞—â–∏—Ç–∞
        security_layout.addWidget(QLabel("–ü—Ä–æ–≤–µ—Ä—è—Ç—å API –∫–ª—é—á–∏:"), 2, 0)
        api_check = SquareCheckBox("–í–∫–ª—é—á–∏—Ç—å")
        api_check.setChecked(True)
        security_layout.addWidget(api_check, 2, 1)
        
        settings_layout.addWidget(security_group)
        
        # –ì—Ä—É–ø–ø–∞: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        performance_group = QGroupBox("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        performance_layout = QGridLayout(performance_group)

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        performance_layout.addWidget(QLabel("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤:"), 0, 0)
        template_cache_check = SquareCheckBox("–í–∫–ª—é—á–∏—Ç—å")
        template_cache_check.setChecked(True)
        performance_layout.addWidget(template_cache_check, 0, 1)

        # –†–∞–∑–º–µ—Ä –∫—ç—à–∞
        performance_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –∫—ç—à–∞:"), 1, 0)
        cache_size_spin = QSpinBox()
        cache_size_spin.setRange(10, 1000)
        cache_size_spin.setValue(100)
        cache_size_spin.setSuffix(" –ú–ë")
        performance_layout.addWidget(cache_size_spin, 1, 1)

        # Timeout —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        performance_layout.addWidget(QLabel("Timeout —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:"), 2, 0)
        timeout_spin = QSpinBox()
        timeout_spin.setRange(5, 300)
        timeout_spin.setValue(30)
        timeout_spin.setSuffix(" —Å–µ–∫")
        performance_layout.addWidget(timeout_spin, 2, 1)

        settings_layout.addWidget(performance_group)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –≥—Ä—É–ø–ø–∞–º
        group_style = """
            QGroupBox {
                font-weight: bold;
                border: 2px solid #4A5568;
                border-radius: 8px;
                margin-top: 10px;
                padding: 16px;
                background-color: #2D3748;
                color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                background-color: #374151;
                border-radius: 4px;
            }
            QLabel {
                color: white;
                font-weight: normal;
            }
            QComboBox, QSpinBox, QLineEdit {
                background-color: #374151;
                border: 1px solid #4A5568;
                border-radius: 4px;
                color: white;
                padding: 6px;
            }
            QComboBox:focus, QSpinBox:focus, QLineEdit:focus {
                border-color: #6366F1;
            }
            QCheckBox {
                color: white;
            }
            /* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã —Ä–∏—Å—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é (SquareCheckBox), –ø–æ—ç—Ç–æ–º—É indicator –Ω–µ —Å—Ç–∏–ª–∏–∑—É–µ–º */
        """
        
        for group in [appearance_group, notifications_group, schedule_group, security_group, performance_group]:
            group.setStyleSheet(group_style)

        # (–£–¥–∞–ª—ë–Ω —Ö–∞–∫ —Å –∑–∞–º–µ–Ω–æ–π —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–±–æ–∫—Å–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –≥–∞–ª–æ—á–∫–∏/–∫–≤–∞–¥—Ä–∞—Ç–∞)
        
        settings_layout.addStretch()
        scroll.setWidget(settings_widget)
        layout.addWidget(scroll)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        save_settings_btn = ModernButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", variant="primary", theme_manager=self.theme_manager)
        reset_settings_btn = ModernButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", variant="secondary", theme_manager=self.theme_manager)
        export_settings_btn = ModernButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", variant="secondary", theme_manager=self.theme_manager)
        
        buttons_layout.addWidget(save_settings_btn)
        buttons_layout.addWidget(reset_settings_btn)
        buttons_layout.addWidget(export_settings_btn)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        save_settings_btn.clicked.connect(self._save_advanced_settings)
        reset_settings_btn.clicked.connect(self._reset_advanced_settings)
        export_settings_btn.clicked.connect(self._export_advanced_settings)
        
        return page
    
    def _save_advanced_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    
    def _reset_advanced_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
                                   QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            QMessageBox.information(self, "–°–±—Ä–æ—Å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
    
    def _export_advanced_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "mailing_settings.json", "JSON Files (*.json)"
        )
        if file_path:
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}")
    
    def _create_logs_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–æ–≤"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(32, 32, 32, 32)
        layout.setSpacing(24)
        
        title = QLabel("üìÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
        title.setStyleSheet("""
            font-size: 28px; 
            font-weight: bold; 
            color: #6366F1; 
            padding-bottom: 8px;
            margin-bottom: 16px;
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏
        controls_layout = QHBoxLayout()
        
        controls_layout.addWidget(QLabel("–£—Ä–æ–≤–µ–Ω—å:"))
        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])
        self.log_level_combo.setCurrentText("INFO")
        self.log_level_combo.currentTextChanged.connect(self._on_log_level_changed)
        controls_layout.addWidget(self.log_level_combo)
        
        clear_logs_btn = ModernButton("–û—á–∏—Å—Ç–∏—Ç—å", variant="tertiary", theme_manager=self.theme_manager)
        clear_logs_btn.clicked.connect(lambda: self.logs_view.clear())
        controls_layout.addWidget(clear_logs_btn)
        
        controls_layout.addStretch()
        layout.addLayout(controls_layout)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.logs_view = QTextEdit()
        self.logs_view.setReadOnly(True)
        self.logs_view.setObjectName('LogsView')
        layout.addWidget(self.logs_view, 1)
        
        return page
    
    def _choose_file_ft(self, field: FloatingTextField, filter_: str = "All (*.*)"):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è FloatingTextField"""
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", '', filter_)
        if path:
            field.setText(path)
    
    def _start_campaign(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if self._mailer.is_running():
            return
        
        file_path = self.recipients_path.text().strip()
        if not file_path:
            self.progress_label.setText("–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            return
        
        recipients = self._load_recipients(file_path)
        if not recipients:
            self.progress_label.setText("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return
        
        template = self.template_path.text().strip()
        subject = self.subject_edit.text().strip() or "–ë–µ–∑ —Ç–µ–º—ã"
        concurrency = self.concurrent_spin.value()
        dry = self.dry_run_switch.isChecked()
        
        self._mailer.start(
            recipients=recipients,
            template_name=template,
            subject=subject,
            dry_run=dry,
            concurrency=concurrency
        )
        
        self.start_btn.setEnabled(False)
        self.cancel_btn.setEnabled(True)
        self.progress_label.setText("–û—Ç–ø—Ä–∞–≤–∫–∞...")
        self.progress_ring.setVisible(True)
        self.progress_ring.setIndeterminate(True)
    
    def _cancel_campaign(self):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if self._mailer.is_running():
            self._mailer.cancel()
            self.progress_label.setText("–û—Ç–º–µ–Ω–∞...")
    
    def _load_recipients(self, path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        loaders = {
            '.csv': CSVLoader(),
            '.xlsx': ExcelLoader(),
            '.json': JSONLoader()
        }
        
        ext = Path(path).suffix.lower()
        loader = loaders.get(ext)
        if not loader:
            return []
        
        try:
            data = loader.load(path)
            valid, errors = validate_email_list(r.email for r in data)
            if errors:
                logging.getLogger('mailing.gui').warning(f'–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(errors)}')
            
            email_map = {r.email: r for r in data}
            return [email_map[email] for email in valid if email in email_map]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _update_dashboard(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dashboard"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            delivery_repo = DeliveryRepository()
            stats = delivery_repo.stats()
            
            total = stats['total']
            success = stats['success']
            failed = stats['failed']
            
            self.dashboard_sent_card.setValue(str(total))
            
            if total > 0:
                success_rate = (success / total) * 100
                self.dashboard_success_card.setValue(f"{success_rate:.1f}%")
                self.dashboard_success_card.setProgress(success_rate / 100)
            else:
                self.dashboard_success_card.setValue("0%")
                self.dashboard_success_card.setProgress(0)
            
            self.dashboard_failed_card.setValue(str(failed))
            
            # –ö–≤–æ—Ç—ã
            quota = DailyQuota()
            quota.load()
            used = quota.used()
            limit = quota.limit
            
            self.dashboard_quota_card.setValue(f"{used}/{limit}")
            self.dashboard_quota_card.setProgress(used / limit)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            event_repo = EventRepository()
            recent_events = event_repo.get_recent_events(3)
            
            if recent_events:
                activity_text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
                for event in recent_events:
                    event_type = event.get('event_type', 'unknown') or 'unknown'
                    recipient = event.get('recipient', 'unknown') or 'unknown'
                    activity_text += f"‚Ä¢ {event_type} - {str(recipient)}\n"
            else:
                activity_text = "–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π"
            
            self.activity_list.setPlainText(activity_text)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dashboard: {e}")
    
    def _on_section_changed(self, index: int):
        """–°–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        self.stack.setCurrentIndex(index)
    
    def _retranslate(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ - –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    def _init_log_handler(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤"""
        if hasattr(self, '_qt_log_handler'):
            return
            
        handler = QtLogHandler()
        handler.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(name)s | %(message)s')
        handler.setFormatter(formatter)
        
        self._qt_log_handler = install_qt_log_handler(handler)
        self._qt_log_handler.emitter.messageEmitted.connect(self._on_log_message)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for level, msg in self._qt_log_handler.buffer:
            self._append_log_line(level, msg)
    
    def _on_log_message(self, level: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not hasattr(self, 'log_level_combo'):
            return
            
        order = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        current = self.log_level_combo.currentText()
        
        if order.index(level) < order.index(current):
            return
        
        self._append_log_line(level, text)
    
    def _append_log_line(self, level: str, text: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–≥"""
        if not hasattr(self, 'logs_view'):
            return
            
        colors = {
            'DEBUG': '#888888',
            'INFO': '#ffffff' if self.theme_manager.is_dark() else '#000000',
            'WARNING': '#e3b341',
            'ERROR': '#d9544d',
            'CRITICAL': '#ff0000'
        }
        
        color = colors.get(level, '#cccccc')
        self.logs_view.append(f"<span style='color:{color}'><b>{level}</b> {text}</span>")
        self.logs_view.verticalScrollBar().setValue(self.logs_view.verticalScrollBar().maximum())
    
    def _on_log_level_changed(self, level: str):
        """–°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not hasattr(self, '_qt_log_handler'):
            return
            
        self.logs_view.clear()
        order = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        
        for lvl, msg in self._qt_log_handler.buffer:
            if order.index(lvl) < order.index(level):
                continue
            self._append_log_line(lvl, msg)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π MailerService
    def _on_mailer_started(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        logging.getLogger('mailing.gui').info('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    
    def _on_mailer_progress(self, event: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        stats = event.get('stats', {})
        success = stats.get('success', 0)
        failed = stats.get('failed', 0)
        total = stats.get('total', 0)
        
        if total:
            progress = int(((success + failed) / total) * 100)
            self.progress_bar.setValue(progress)
            
            self.progress_ring.setIndeterminate(False)
            self.progress_ring.setMaximum(total)
            self.progress_ring.setValue(success + failed)
        
        self.progress_label.setText(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {success + failed}/{total} | ‚úÖ {success} ‚ùå {failed}")
    
    def _on_mailer_finished(self, stats: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.start_btn.setEnabled(True)
        self.cancel_btn.setEnabled(False)
        self.progress_label.setText("–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        self.progress_ring.setVisible(False)
        
        logging.getLogger('mailing.gui').info(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}')
    
    def _on_mailer_error(self, msg: str, stats: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.start_btn.setEnabled(True)
        self.cancel_btn.setEnabled(False)
        self.progress_label.setText(f"–û—à–∏–±–∫–∞: {msg}")
        self.progress_ring.setVisible(False)
        
        logging.getLogger('mailing.gui').error(f'–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {msg}')
    
    def _on_mailer_cancelled(self, stats: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.start_btn.setEnabled(True)
        self.cancel_btn.setEnabled(False)
        self.progress_label.setText("–û—Ç–º–µ–Ω–µ–Ω–æ")
        self.progress_ring.setVisible(False)
        
        logging.getLogger('mailing.gui').info('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    
    def _on_palette_changed(self, palette):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞–ª–∏—Ç—Ä—ã"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
        app = QApplication.instance()
        if app:
            from . import styles
            styles.apply_palette(app, self.theme_manager.is_dark())