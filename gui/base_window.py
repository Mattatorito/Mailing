from PySide6.QtCore import Qt
from __future__ import annotations
from typing import Optional

from PySide6.QtWidgets import (
import logging

from .log_handler import QtLogHandler, install_qt_log_handler
from .mailer_service import MailerService
from .theme import ThemeManager

"""
–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤ main_window.py –∏ enhanced_main_window.py"""

try:
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QLabel,
    QComboBox,
    QTextEdit,QHBoxLayout,"
        ")

    GUI_AVAILABLE = True
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ GUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    QMainWindow = object
    QWidget = object
    QVBoxLayout = object
    QLabel = object
    QComboBox = object
    QTextEdit = object
    QHBoxLayout = object
    Qt = None
    GUI_AVAILABLE = False

try:
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    ThemeManager = object
    QtLogHandler = object
    install_qt_log_handler = lambda x: x
    MailerService = object

class BaseMainWindow(QMainWindow):"""–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –æ–∫–æ–Ω —Å –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""

    def __init__(self, theme_manager):"""–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è  init  ."
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç."""

    Args:
    theme_manager: –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è theme manager"""
        if not GUI_AVAILABLE:raise ImportError("GUI components not available - PySide6 not installed")

    super().__init__()
    self.theme_manager = theme_manager
    self._mailer = MailerService()
    self._qt_log_handler: Optional[QtLogHandler] = None

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ mailer'–∞
    self._mailer.started.connect(self._on_mailer_started)
    self._mailer.progress.connect(self._on_mailer_progress)
    self._mailer.finished.connect(self._on_mailer_finished)
    self._mailer.error.connect(self._on_mailer_error)
    self._mailer.cancelled.connect(self._on_mailer_cancelled)

    self._init_log_handler()

    def _init_ui(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–¥–∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    pass

    # ---------------- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è -----------------
    def _init_log_handler(self):"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤"""if hasattr(self, "_qt_log_handler"):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  init log handler."""
            return

    handler = QtLogHandler()
    handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(name)s | %(message)s"
    )
    handler.setFormatter(formatter)

    self._qt_log_handler = install_qt_log_handler(handler)
    self._qt_log_handler.emitter.messageEmitted.connect(self._on_log_message)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for level, msg in self._qt_log_handler.buffer:
        self._append_log_line(level, msg)

    def _on_log_message(self, level: str, text: str):"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è"""if not hasattr(self, "log_level_combo"):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  on log message."""
            return
order = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
    current = self.log_level_combo.currentText()

        if order.index(level) < order.index(current):
            return

    self._append_log_line(level, text)

    def _append_log_line(self, level: str, text: str):"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–≥"""if not hasattr(self, "logs_view"):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  append log line."""
            return

"""INFO": "#ffffff" if self.theme_manager.is_dark() else "#000000","""
"""ERROR": "#d9544d","""

    color = colors.get(level, "#cccccc")
    self.logs_view.append(f"<span style='color:{color}'><b>{level}</b> {text}</span>"
    )
    self.logs_view.verticalScrollBar().setValue(
        self.logs_view.verticalScrollBar().maximum()
    )

    def _on_log_level_changed(self, level: str):"""–°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""if not hasattr(self, "_qt_log_handler"):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  on log level changed."""
            return

    self.logs_view.clear()order = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]

        for lvl, msg in self._qt_log_handler.buffer:
            if order.index(lvl) < order.index(level):
            continue
        self._append_log_line(lvl, msg)

    # ---------------- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ MailerService -----------------
    def _on_mailer_started(self):"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""logging.getLogger("mailing.gui").info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    def _on_mailer_progress(self, event: dict):"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  on mailer progress."""
    # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–¥–∫–ª–∞—Å—Å—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    pass

    def _on_mailer_finished(self, stats: dict):"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""logging.getLogger("mailing.gui").info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")

    def _on_mailer_error(self, msg: str, stats: dict):"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""logging.getLogger("mailing.gui").error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {msg}")

    def _on_mailer_cancelled(self, stats: dict):"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""logging.getLogger("mailing.gui").info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {stats}")
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  on mailer cancelled."""

    # ---------------- –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI -----------------
    def _create_logs_section(self) -> QWidget:"""–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ª–æ–≥–æ–≤ (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω)"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  create logs section."""
    logs_widget = QWidget()
    layout = QVBoxLayout(logs_widget)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫title = QLabel("üìÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
    title.setStyleSheet("""
        font-size: 24px;
        font-weight: bold;
        color: #6366F1;
        margin-bottom: 16px;"""
    )
    title.setAlignment(Qt.AlignCenter)
    layout.addWidget(title)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏
    controls_layout = QHBoxLayout()
controls_layout.addWidget(QLabel("–£—Ä–æ–≤–µ–Ω—å:"))
    self.log_level_combo = QComboBox()self.log_level_combo.addItems(["DEBUG","INFO",
        "WARNING","ERROR", "CRITICAL"])self.log_level_combo.setCurrentText("INFO")
    self.log_level_combo.currentTextChanged.connect(self._on_log_level_changed)
    controls_layout.addWidget(self.log_level_combo)

    controls_layout.addStretch()
    layout.addLayout(controls_layout)

    # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
    self.logs_view = QTextEdit()
    self.logs_view.setReadOnly(True)self.logs_view.setObjectName("LogsView")
    layout.addWidget(self.logs_view, 1)

        return logs_widget

    # ---------------- –£—Ç–∏–ª–∏—Ç—ã -----------------
    def apply_theme(self, dark: bool):"""–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –æ–∫–Ω—É"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç apply theme."""
    # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–¥–∫–ª–∞—Å—Å—ã –º–æ–≥—É—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    pass

class LoggingMixin:"""–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""

    def __init__(self, *args, **kwargs):"""–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è  init  ."

    Args:"""
    super().__init__(*args, **kwargs)
    self.logger = logging.getLogger(self.__class__.__module__)

    def log_info(self, message: str):"""–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç log info."""
    self.logger.info(message)

    def log_warning(self, message: str):"""–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç log warning."""
    self.logger.warning(message)

    def log_error(self, message: str):"""–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç log error."""
    self.logger.error(message)

class CampaignMixin:"""–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def _start_campaign(self):"""–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ - –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  start campaign."""
    # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    # –ü–æ–¥–∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏
    pass

    def _cancel_campaign(self):"""–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ - –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞"""if hasattr(self, "_mailer") and self._mailer:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç  cancel campaign."""
        self._mailer.cancel()
