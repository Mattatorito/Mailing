import asyncio
import os
import sys

    import traceback
    import traceback
from datetime import datetime

from mailing.models import Recipient
from mailing.sender import run_campaign, CampaignController
from persistence.db import get_connection

#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –û–¢–ü–†–ê–í–ö–ò
–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email –≤–ª–∞–¥–µ–ª—å—Ü–∞ API –∫–ª—é—á–∞"""
sys.path.append(".")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏os.environ["RESEND_API_KEY"] = "re_NY3yzMqH_JaMDnBSGZdi3qZ32rDmMdq7W"os.environ["RESEND_FROM_EMAIL"] = "onboarding@resend.dev"os.environ["RESEND_FROM_NAME"] = "Email Marketing System - Real Test"

async def final_real_email_test():"""–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ email –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç final real email test."""
print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –û–¢–ü–†–ê–í–ö–ò EMAIL")print("=" * 70)print("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: onboarding@resend.dev")print("üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: sashakul2018@gmail.com (–≤–ª–∞–¥–µ–ª–µ—Ü API)")print("‚ö†Ô∏è  –≠–¢–û –ù–ê–°–¢–û–Ø–©–ê–Ø –û–¢–ü–†–ê–í–ö–ê - –ù–ï –°–ò–ú–£–õ–Ø–¶–ò–Ø!")print("=" * 70)

    # 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (email –≤–ª–∞–¥–µ–ª—å—Ü–∞ API –∫–ª—é—á–∞)owner_email = "sashakul2018@gmail.com"
    test_recipient = Recipient(
    email = owner_email,name="–í–ª–∞–¥–µ–ª–µ—Ü API",
    variables={"email": owner_email,"name": "–í–ª–∞–¥–µ–ª–µ—Ü API",
        "subject": "üöÄ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏ - –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê",
        "company": "Email Marketing System",
        "current_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "test_message": "–≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏!",
        "system_info": "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
        "api_provider": "Resend API",
        "database_records": "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ SQLite –±–∞–∑—É",
        "monitoring": "–í–∫–ª—é—á—ë–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
    },
    )
print(f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {test_recipient.email}")print(f"üë§ –ò–º—è: {test_recipient.name}")

    # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏
    with get_connection() as conn:
    cursor = conn.cursor()
cursor.execute("SELECT COUNT(*) FROM deliveries")
    total_before = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
    success_before = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM deliveries WHERE provider = 'resend' AND success = 1"
    )
    resend_success_before = cursor.fetchone()[0]
print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–¢–ü–†–ê–í–ö–ò:")print(f"   üìß –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {total_before}")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_before}")print(f"   üåê –£—Å–ø–µ—à–Ω—ã—Ö —á–µ—Ä–µ–∑ Resend: {resend_success_before}")

    # 3. –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–êprint(f"\nüöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ô –ö–ê–ú–ü–ê–ù–ò–ò...")print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ email —á–µ—Ä–µ–∑ Resend API")

    controller = CampaignController()
    success_count = 0
    message_id = None
    error_details = None
    provider_used = None

    try:
        async for event in run_campaign(
        recipients=[test_recipient],template_name="template.html",
            subject="üöÄ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏ - –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê",
        dry_run = False,  # –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê!
        concurrency = 1,
        controller = controller,
    ):event_type = event.get("type")print(f"üìä –°–æ–±—ã—Ç–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: {event_type}")
if event_type == "progress":email = event.get("email")success = event.get("success")

                if success:
                success_count += 1message_id = event.get("message_id")provider_used = event.get("provider")
print(f"üéâ –£–°–ü–ï–®–ù–ê–Ø –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê!")print(f"   üìß Email: {email}")print(f"   üÜî Message ID: {message_id}")print(f"   üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_used}")print(f"   ‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
            else:error_details = event.get("error")print(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò:")print(f"   üìß Email: {email}")print(f"   üîç –û—à–∏–±–∫–∞: {error_details}")
elif event_type == "finished":total_sent = event.get("total_sent",
    0)total_failed = event.get("total_failed", 0)
print(f"\nüèÅ –ö–ê–ú–ü–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")print(f"   üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")print(f"   ‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {total_failed}")
            break

    except Exception as e:print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–ê–ú–ü–ê–ù–ò–ò: {e}")

    traceback.print_exc()
        return False

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–îprint(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")

    with get_connection() as conn:
    cursor = conn.cursor()

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞cursor.execute("SELECT COUNT(*) FROM deliveries")
    total_after = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
    success_after = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM deliveries WHERE provider = 'resend' AND success = 1"
    )
    resend_success_after = cursor.fetchone()[0]
print(f"üìà –ü–û–°–õ–ï –û–¢–ü–†–ê–í–ö–ò:")print(f"   üìß –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {total_after} (–±—ã–ª–æ: {total_before})")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_after} (–±—ã–ª–æ: {success_before})")
    print(f"   üåê –£—Å–ø–µ—à–Ω—ã—Ö Resend: {resend_success_after} (–±—ã–ª–æ: {resend_success_before})"
    )print(f"   üìä –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_after - total_before}")print(f"   ‚úÖ –ù–æ–≤—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö: {success_after - success_before}")

    # –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    cursor.execute("""
        SELECT email, success, provider, created_at, message_id, status_code, error
        FROM deliveries
        ORDER BY id DESC
        LIMIT 1"""
    )
    last_delivery = cursor.fetchone()

        if last_delivery:
            is_success = last_delivery[1] == 1status_icon = "‚úÖ" if is_success else "‚ùå"
print(f"\nüìÆ –ü–û–°–õ–ï–î–ù–Ø–Ø –ó–ê–ü–ò–°–¨ –í –ë–î: {status_icon}")print(f"   üìß Email: {last_delivery[0]}")print(f"   üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {last_delivery[2]}")print(f"   üïí –í—Ä–µ–º—è: {last_delivery[3]}")print(f"   üÜî Message ID: {last_delivery[4]}")print(f"   üìä Status Code: {last_delivery[5]}")

            if last_delivery[6]:  # –ï—Å—Ç—å –æ—à–∏–±–∫–∞print(f"   ‚ùå –û—à–∏–±–∫–∞: {last_delivery[6]}")

    # 5. –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢print(f"\n" + "=" * 70)print(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢ –û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")print(f"=" * 70)

    if success_count > 0 and message_id:print(f"üèÜ –ü–û–õ–ù–´–ô –£–°–ü–ï–• - –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê!")print(f"")print(f"‚úÖ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´:")print(f"   üìß –†–µ–∞–ª—å–Ω—ã–π email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Resend API")print(f"   üÜî Message ID –ø–æ–ª—É—á–µ–Ω: {message_id}")print(f"   üìä –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")print(f"   üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_used}")print(f"   üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {owner_email}")print(f"")print(f"üìà –°–ò–°–¢–ï–ú–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")

        with get_connection() as conn:
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
        total_success = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries")
        total_attempts = cursor.fetchone()[0]

            if total_attempts > 0:
            success_rate = (total_success / total_attempts) * 100
        else:
            success_rate = 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        cursor.execute("""
            SELECT provider, COUNT(*) as total, SUM(success) as successful
            FROM deliveries
            GROUP BY provider"""
        )
        provider_stats = cursor.fetchall()

        print(f"   üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% ({total_success}/{total_attempts})"
        )print(f"   üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:")

            for provider, total, successful in provider_stats:
                provider_rate = (successful / total * 100) if total > 0 else 0
            print(f"      - {provider}: {provider_rate:.1f}% ({successful}/{total})"
            )
print(f"")print(f"üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")print(f"   ‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω")print(f"   üìß Email –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—é")print(f"   üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ - —Ä–µ–∞–ª—å–Ω—ã–µ")print(f"   üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")print(f"   üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö: {owner_email}")

        return True

    else:print(f"‚ùå –û–¢–ü–†–ê–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨")print(f"")print(f"üîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:")
        if error_details:print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: {error_details}")
    else:print(f"   ‚ùì –û—à–∏–±–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
print(f"")print(f"üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á Resend")print(f"   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è")print(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞ –≤ Resend")print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞")

        return False

if __name__ == "__main__":print("üî• –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–∫–∞–∂–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ email!")print("=" * 70)

    try:
    result = asyncio.run(final_real_email_test())

        if result:print(f"\nüéä –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")print(f"üìß –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ä–µ–∞–ª—å–Ω—ã–π email")print(f"üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:print(f"\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")print(f"üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    except KeyboardInterrupt:print(f"\n‚èπÔ∏è –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:print(f"\nüí• –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")

    traceback.print_exc()
