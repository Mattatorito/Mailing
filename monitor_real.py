import json
import requests

from datetime import datetime
import time

from persistence.db import get_connection

#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

def get_delivery_stats():"""–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–æ–∫"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç get delivery stats."""
conn = get_connection()
cursor = conn.cursor()

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞cursor.execute("SELECT COUNT(*) FROM deliveries")
total = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
    successful = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 0")
    failed = cursor.fetchone()[0]

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏cursor.execute("SELECT * FROM deliveries ORDER BY id DESC LIMIT 5")
    recent = cursor.fetchall()

    conn.close()

    return {"total": total,"successful": successful,"failed": failed,"recent": recent,
    }

def get_webhook_events():"""–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ webhook API"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç get webhook events."""
    try:response = requests.get("http://localhost:8000/events")
        return response.json() if response.status_code == 200 else []
    except:
        return []

def print_dashboard():"""–í—ã–≤–µ—Å—Ç–∏ dashboard –≤ –∫–æ–Ω—Å–æ–ª—å"""print("=" * 80)print("üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ –†–ê–°–°–´–õ–û–ö - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï")print("=" * 80)print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç print dashboard."""

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫
    stats = get_delivery_stats()print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–°–¢–ê–í–û–ö:")print(f"   üìß –í—Å–µ–≥–æ: {stats['total']}")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['successful']}")print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}")
if stats["total"] > 0:success_rate = (stats["successful"] / stats["total"]) * 100print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –î–û–°–¢–ê–í–ö–ò:")for delivery in stats["recent"][-3:]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3status = "‚úÖ" if delivery[2] else "‚ùå"print(f"   {status} {delivery[1]} | {delivery[6]} | {delivery[7]}")

    # –°–æ–±—ã—Ç–∏—è webhook
    events = get_webhook_events()print(f"\nüîî WEBHOOK –°–û–ë–´–¢–ò–Ø ({len(events)}):")
    for event in events[-3:]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
    print(f"   üéØ {event['event_type']} | {event['recipient']} | {event['created_at']}"
    )
print(f"\nüåê Webhook —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")print("=" * 80)

if __name__ == "__main__":print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

    try:
        while True:print("\033[2J\033[H")  # –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
        print_dashboard()
        time.sleep(5)  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    except KeyboardInterrupt:print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
