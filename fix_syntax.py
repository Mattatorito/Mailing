from pathlib import Path
from typing import List
import os
import re

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è black"""

def fix_multiline_strings(file_path: Path) -> int:"""–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç fix multiline strings."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
    content = f.read()

    original_content = content

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ SQL –∑–∞–ø—Ä–æ—Å–∞—Ö
    # –ü–∞—Ç—Ç–µ—Ä–Ω: —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø—è—Ç–æ–π –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–æ–π
    content = re.sub(r'("[^"]*,)\s*\n\s*([^"]*")',r'\1"\n            "\2',
        content
    )

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º f-—Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    content = re.sub(r'(f"[^"]*,)\s*\n\s*([^"]*")',r'\1"\n            f"\2',
        content
    )

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    content = re.sub(r'("INSERT [^"]*,)\s*\n\s*([^"]*")',r'\1"\n            "\2',
        content
    )

    content = re.sub(r'("SELECT [^"]*,)\s*\n\s*([^"]*")',r'\1"\n            "\2',
        content
    )

    changes = 0
        if content != original_content:with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        changes = 1

        return changes

    except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return 0

def check_syntax(file_path: Path) -> bool:"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–∞"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç check syntax."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()compile(content, str(file_path), 'exec')
        return True
    except SyntaxError:
        return False
    except Exception:
        return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–æ—Ä–º

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""project_root = Path("/Users/alexandr/Desktop/Projects/Scripts/Mailing")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ãpython_files = list(project_root.rglob("*.py"))
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...")
    print()

    fixed_files = 0
    syntax_errors_fixed = 0

    for file_path in python_files:
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∫—ç—à
        if '.venv' in str(file_path) or '__pycache__' in str(file_path):
        continue

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    syntax_ok_before = check_syntax(file_path)

        if not syntax_ok_before:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        changes = fix_multiline_strings(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        syntax_ok_after = check_syntax(file_path)

            if syntax_ok_after and not syntax_ok_before:
            print(f"‚úÖ {file_path.name}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            syntax_errors_fixed += 1
            elif changes > 0:print(f"üîß {file_path.name}: –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            fixed_files += 1
        else:print(f"‚ùå {file_path.name}: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

    print()print(f"üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö –ó–ê–í–ï–†–®–ï–ù–û:")print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {syntax_errors_fixed}")print(f"   üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")

if __name__ == "__main__":
    main()
