#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import tempfile
from pathlib import Path


def create_simple_test():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç"""
    
    test_content = '''"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import pytest
import os
import sys
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        from mailing import config
        from templating import engine
        from persistence import db
        assert True
    except ImportError as e:
        pytest.fail(f"Failed to import: {e}")


def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from persistence.db import get_connection
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        conn.close()
        assert result[0] == 1
    except Exception as e:
        pytest.fail(f"Database test failed: {e}")


def test_template_engine():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        from templating.engine import TemplateEngine
        engine = TemplateEngine()
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
            f.write("Hello {{ name }}!")
            template_path = f.name
        
        result = engine.render_string("Hello {{ name }}!", {"name": "World"})
        assert result == "Hello World!"
        
        os.unlink(template_path)
        
    except Exception as e:
        pytest.fail(f"Template engine test failed: {e}")


def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from mailing.config import Settings
        settings = Settings()
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
        assert hasattr(settings, 'resend_api_key')
    except Exception as e:
        pytest.fail(f"Config test failed: {e}")


def test_email_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email"""
    try:
        from validation.email_validator import EmailValidator
        validator = EmailValidator()
        
        assert validator.is_valid("test@example.com") is True
        assert validator.is_valid("invalid-email") is False
        
    except Exception as e:
        pytest.fail(f"Email validation test failed: {e}")


if __name__ == "__main__":
    pytest.main([__file__])
'''
    
    return test_content


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path("/Users/alexandr/Desktop/Projects/Scripts/Mailing")
    tests_dir = project_root / "tests"
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª–æ–º–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test_file in tests_dir.glob("*.py"):
        test_file.unlink()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç
    simple_test_path = tests_dir / "test_simple.py"
    with open(simple_test_path, 'w', encoding='utf-8') as f:
        f.write(create_simple_test())
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: {simple_test_path}")
    print("üéØ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤")


if __name__ == "__main__":
    main()