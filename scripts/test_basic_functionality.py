#!/usr/bin/env python3

import asyncio
import sys
import traceback

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
def test_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã."""
    try:
        from src.mailing.config import settings
        from src.mailing.models import Recipient, DeliveryResult
        from src.mailing.sender import CampaignController
        from src.templating.engine import TemplateEngine
        from src.validation.email_validator import EmailValidator
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True  # Return success status
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()
        return False  # Return failure status

def test_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    try:
        from src.mailing.config import settings
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, database: {settings.sqlite_db_path}")
        return True  # Return success status
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False  # Return failure status

def test_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from src.mailing.models import Recipient, DeliveryResult
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        recipient = Recipient(
            email="test@example.com",
            name="Test User"
        )
        
        result = DeliveryResult(
            success=True,
            status_code=200,
            message_id="test-123",
            provider="resend"
        )
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   Recipient: {recipient.email} ({recipient.name})")
        print(f"   DeliveryResult: {result.success}")
        return True  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        traceback.print_exc()
        return False

def test_campaign_controller():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º CampaignController."""
    try:
        from mailing.sender import CampaignController
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        controller = CampaignController()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not controller.cancelled():
            print("‚úÖ CampaignController —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True  # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        else:
            print("‚ùå CampaignController: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CampaignController: {e}")
        traceback.print_exc()
        return False

def test_template_engine():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä."""
    try:
        from templating.engine import TemplateEngine
        
        engine = TemplateEngine("samples")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        result = engine.render_string(
            "Hello {{ name }}!",
            {"name": "World"}
        )
        
        if result == "Hello World!":
            print("‚úÖ –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True  # –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–∏: {result}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        traceback.print_exc()
        return False

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö", test_models),
        ("–®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä", test_template_engine),
        ("CampaignController", test_campaign_controller),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞, –Ω–µ –¥–ª—è pytest
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞, –Ω–µ –¥–ª—è pytest
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
