from pathlib import Path
import json
import os
import re
import sqlite3
import sys

        import traceback
from datetime import datetime
import ast

#!/usr/bin/env python3
"""
üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã"""
sys.path.append(".")



def deep_component_analysis():"""–ü—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç deep component analysis."""
print("üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")print("=" * 80)

    # 1. –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–´–• –ú–û–î–£–õ–ï–ôprint("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–´–• –ú–û–î–£–õ–ï–ô")print("-" * 60)

    core_modules = {"mailing/sender.py": "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º","""resend/client.py": "–ö–ª–∏–µ–Ω—Ç Resend API","""persistence/db.py": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö","""templating/engine.py": "–®–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏—è","""mailing/cli.py": "CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å","""gui/app.py": "GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",""}

    module_analysis = {}

    for module_path, description in core_modules.items():
        print(f"\nüì¶ {module_path} ({description})")

        if not Path(module_path).exists():print(f"   ‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù")
            continue

        try:with open(module_path, "r", encoding="utf-8") as f:
                content = f.read()

            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            tree = ast.parse(content)

            classes = [
                node.name for node in ast.walk(tree) if isinstance(node, ast.ClassDef)
            ]
            functions = [
                node.name
                for node in ast.walk(tree)
                if isinstance(node, ast.FunctionDef)
            ]
            async_functions = [
                node.name
                for node in ast.walk(tree)
                if isinstance(node, ast.AsyncFunctionDef)
            ]

            # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
            imports = []
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    imports.extend([alias.name for alias in node.names])
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        imports.append(node.module)

            # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity_score = 0
            for node in ast.walk(tree):
                if isinstance(node, (ast.If, ast.For, ast.While, ast.Try)):
                    complexity_score += 1

            # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            docstrings = []
            for node in ast.walk(tree):
                if isinstance(
                    node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)
                ):
                    if ast.get_docstring(node):
                        docstrings.append(node.name)

            analysis = {"size": len(content),"""lines": len(content.splitlines()),"""classes": len(classes),"""functions": len(functions),"""async_functions": len(async_functions),"""imports": len(set(imports)),"""complexity": complexity_score,"""documented": len(docstrings),"""docstring_coverage": (
                    len(docstrings)
                    / (len(classes) + len(functions) + len(async_functions))
                    * 100
                    if (classes or functions or async_functions)
                    else 0),"
            "}
print(f"   üìä –†–∞–∑–º–µ—Ä: {analysis['size']} –±–∞–π—Ç, {analysis['lines']} —Å—Ç—Ä–æ–∫")
            print(f"   üèóÔ∏è –ö–ª–∞—Å—Å—ã: {analysis['classes']},–§—É–Ω–∫—Ü–∏–∏: {analysis['functions']},""Async: {analysis['async_functions']}"
            )
            print(f"   üì¶ –ò–º–ø–æ—Ä—Ç—ã: {analysis['imports']},""–°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}"
            )
            print(f"   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {analysis['documented']}/{len(classes) + len(functions) + len(async_functions)} ({analysis['docstring_coverage']:.1f}%)"
            )

            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª—è
            quality_score = 0

            # –†–∞–∑–º–µ—Ä (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π 100-500 —Å—Ç—Ä–æ–∫)if 100 <= analysis["lines"] <= 500:
                quality_score += 25elif analysis["lines"] <= 1000:
                quality_score += 15

            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—èif analysis["docstring_coverage"] >= 80:
                quality_score += 25elif analysis["docstring_coverage"] >= 50:
                quality_score += 15

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)if analysis["async_functions"] > 0:
                quality_score += 20

            # –°–ª–æ–∂–Ω–æ—Å—Ç—å (–Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è)if analysis["complexity"] < analysis["lines"] * 0.1:
                quality_score += 30elif analysis["complexity"] < analysis["lines"] * 0.2:
                quality_score += 15

            if quality_score >= 80:grade = "üü¢ A"
            elif quality_score >= 60:grade = "üü° B"
            elif quality_score >= 40:grade = "üü† C"
            else:grade = "üî¥ D"
print(f"   {grade} –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score}/100")

            module_analysis[module_path] = analysismodule_analysis[module_path]["quality_score"] = quality_score

        except Exception as e:print(f"   üí• –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {e}")

    # 2. –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•print(f"\n\n2Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")print("-" * 60)
db_files = ["mailing.sqlite3", "test_mailing.sqlite3"]

    for db_file in db_files:
        if not Path(db_file).exists():
            continue
print(f"\nüíæ {db_file}")

        try:
            conn = sqlite3.connect(db_file)
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ücursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()

            for (table_name,) in tables:print(f"\n   üìä –¢–∞–±–ª–∏—Ü–∞: {table_name}")

                # –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ãcursor.execute(f"PRAGMA table_info({table_name})")
                columns = cursor.fetchall()print(f"      –ö–æ–ª–æ–Ω–∫–∏ ({len(columns)}):")
                for col in columns:print(f"         {col[1]}: {col[2]} {'(PK)' if col[5] else ''}")

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–πcursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]print(f"      –ó–∞–ø–∏—Å–µ–π: {count}")

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                if count > 0:
                    cursor.execute(f"SELECT * FROM {table_name} ORDER BY rowid DESC LIMIT 3"
                    )
                    recent = cursor.fetchall()print(f"      –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                    for i, row in enumerate(recent, 1):
                        print(f"         {i}: {str(row)[:100]}{'...' if len(str(row)) > 100 else ''}"
                        )

            conn.close()

        except Exception as e:print(f"   üí• –û–®–ò–ë–ö–ê: {e}")

    # 3. –ê–ù–ê–õ–ò–ó –¢–ï–°–¢–û–í–û–ì–û –ü–û–ö–†–´–¢–ò–Øprint(f"\n\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ï–°–¢–û–í–û–ì–û –ü–û–ö–†–´–¢–ò–Ø")print("-" * 60)
test_files = list(Path("tests").glob("test_*.py"))

    total_test_functions = 0
    test_coverage = {}

    for test_file in test_files:print(f"\nüß™ {test_file.name}")

        try:with open(test_file, "r", encoding="utf-8") as f:
                content = f.read()

            tree = ast.parse(content)

            test_functions = []
            for node in ast.walk(tree):if isinstance(node, ast.FunctionDef) and node.name.startswith("test_"):
                    test_functions.append(node.name)

            total_test_functions += len(test_functions)

            # –ò—â–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
            tested_modules = set()for line in content.split("\n"):if "from mailing" in line or "import mailing" in line:match = re.search(r"from (mailing\.[^\s]+)", line)
                    if match:
                        tested_modules.add(match.group(1))
print(f"   üìã –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(test_functions)}")
            print(f"   üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏: {',""'.join(tested_modules) if tested_modules else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}"
            )

            if len(test_functions) >= 10:grade = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
            elif len(test_functions) >= 5:grade = "üü° –•–æ—Ä–æ—à–æ"
            elif len(test_functions) >= 1:grade = "üü† –ë–∞–∑–æ–≤–æ"
            else:grade = "üî¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
print(f"   {grade}")

        except Exception as e:print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
print(f"\nüìä –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –¢–ï–°–¢–û–í: {total_test_functions}")

    # 4. –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–òprint(f"\n\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")print("-" * 60)

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    sensitive_vars = {"RESEND_API_KEY": os.environ.get("RESEND_API_KEY", "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"),"""RESEND_FROM_EMAIL": os.environ.get("RESEND_FROM_EMAIL", "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"),""}

    print("üîê –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    for var, value in sensitive_vars.items():if value == "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù":print(f"   ‚ùå {var}: {value}")
        else:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            masked = (value[:8] + "*" * (len(value) - 12) + value[-4:]
                if len(value) > 12else "*" * len(value)
            )print(f"   ‚úÖ {var}: {masked}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txtprint(f"\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")if Path("requirements.txt").exists():with open("requirements.txt") as f:
            deps = [line.strip() for line in f if line.strip() and not line.startswith("#")
            ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        web_deps = [
            d
            for d in depsif any(x in d.lower() for x in ["fastapi","uvicorn","requests", "httpx"])
        ]
        gui_deps = [d for d in deps if any(x in d.lower() for x in ["pyside6","tkinter", "qt"])
        ]
        test_deps = [d for d in deps if any(x in d.lower() for x in ["pytest","mock", "test"])
        ]
print(f"   üåê Web/API: {len(web_deps)} –ø–∞–∫–µ—Ç–æ–≤")print(f"   üñ•Ô∏è GUI: {len(gui_deps)} –ø–∞–∫–µ—Ç–æ–≤")print(f"   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(test_deps)} –ø–∞–∫–µ—Ç–æ–≤")print(f"   üìä –í—Å–µ–≥–æ: {len(deps)} –ø–∞–∫–µ—Ç–æ–≤")

    # 5. –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–òprint(f"\n\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")print("-" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–îif Path("mailing.sqlite3").exists():conn = sqlite3.connect("mailing.sqlite3")
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–æ–∫cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
            successful = cursor.fetchone()[0] if cursor.fetchone() else 0
cursor.execute("SELECT COUNT(*) FROM deliveries")
            total = cursor.fetchone()[0] if cursor.fetchone() else 0

            success_rate = (successful / total * 100) if total > 0 else 0
print(f"üìß –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ü–†–ê–í–û–ö:")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")print(f"   üìä –í—Å–µ–≥–æ: {total}")print(f"   üíØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

            if success_rate >= 95:perf_grade = "üü¢ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ"
            elif success_rate >= 85:perf_grade = "üü° –•–æ—Ä–æ—à–æ"
            elif success_rate >= 70:perf_grade = "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
            else:perf_grade = "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
print(f"   {perf_grade}")

        except:print(f"   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–ø—Ä–∞–≤–∫–∞—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î")

        conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–îif Path("test_mailing.sqlite3").exists():conn = sqlite3.connect("test_mailing.sqlite3")
        cursor = conn.cursor()

        try:cursor.execute("SELECT COUNT(*) FROM deliveries WHERE success = 1")
            test_successful = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM deliveries")
            test_total = cursor.fetchone()[0]

            test_success_rate = (
                (test_successful / test_total * 100) if test_total > 0 else 0
            )
print(f"\nüß™ –¢–ï–°–¢–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {test_successful}")print(f"   üìä –í—Å–µ–≥–æ: {test_total}")print(f"   üíØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {test_success_rate:.1f}%")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ Message ID
            cursor.execute("SELECT COUNT(*) FROM deliveries WHERE message_id IS NOT NULL AND provider = 'resend'"
            )
            real_messages = cursor.fetchone()[0]
print(f"   üÜî –†–µ–∞–ª—å–Ω—ã—Ö Message ID: {real_messages}")

        except Exception as e:print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")

        conn.close()

    # 6. –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´print(f"\n\n6Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")print("=" * 80)
print("üéØ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:")print("   ‚úÖ –•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")print("   ‚úÖ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ README")print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")print("   ‚úÖ –†–∞–±–æ—á–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Resend API")print("   ‚úÖ –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ (17 —Ñ–∞–π–ª–æ–≤)")print("   ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")print("   ‚úÖ GUI –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")
print("\n‚ö†Ô∏è –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:")print("   üîß –ù–∏–∑–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–¥–∞ (30% –∫–∞—á–µ—Å—Ç–≤–∞)")print("   üîß –í–æ–∑–º–æ–∂–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")print("   üîß –¢–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")print("   üîß –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ .venv –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
print("\nüöÄ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")print("   1. –î–æ–±–∞–≤–∏—Ç—å docstring –≤–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã")print("   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")print("   3. –ò—Å–∫–ª—é—á–∏—Ç—å .venv –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞")print("   4. –î–æ–±–∞–≤–∏—Ç—å type hints –≤–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏")print("   5. –°–æ–∑–¥–∞—Ç—å CI/CD pipeline")
print("\nüíé –û–ë–©–ò–ô –í–´–í–û–î:")print("   –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç –û–¢–õ–ò–ß–ù–£–Æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.")
    print("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."
    )print("   –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–¥–æ—á—ë—Ç—ã –∫–∞—Å–∞—é—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.")print("   –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏.")

if __name__ == "__main__":
    try:
        deep_component_analysis()print(f"\n‚úÖ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù")

    except Exception as e:print(f"\nüí• –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {e}")

        traceback.print_exc()
